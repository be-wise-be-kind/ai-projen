# Purpose: Full-stack CI/CD workflow combining Python backend and TypeScript frontend testing
# Scope: Comprehensive testing for full-stack applications with change detection and parallel execution
# Overview: Orchestrates CI/CD for full-stack projects by detecting changes and running selective tests.
#     Combines Python and TypeScript workflows with intelligent caching, parallel execution, and integration
#     testing support. Optimizes CI time by only running affected test suites while maintaining comprehensive
#     coverage reporting across the entire stack.
# Dependencies: Docker BuildKit, GHCR, Python plugin, TypeScript plugin, make targets
# Exports: Combined test results, coverage reports, and full-stack quality metrics
# Environment: GitHub Actions with multi-language support and Docker-first pattern
# Related: ci-python.yml, ci-typescript.yml, integration testing setup
# Implementation: Change detection with selective testing and parallel job execution

name: Full-Stack CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'  # Customize: Your Python version
  NODE_VERSION: '20'  # Customize: Your Node.js version
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/{{PROJECT_NAME}}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - '.docker/dockerfiles/Dockerfile.backend'
              - 'Dockerfile.python'
            frontend:
              - 'frontend/**'
              - '**/*.ts'
              - '**/*.tsx'
              - 'package.json'
              - '.docker/dockerfiles/Dockerfile.frontend'
              - 'Dockerfile.frontend'
            tests:
              - 'test/**'
              - '**/*.test.*'
              - '**/*.spec.*'

  lint-backend:
    name: Lint Backend (Python)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Python linting
        run: |
          if [ -f "Makefile" ]; then
            make lint-python
          else
            echo "Running basic Python linting..."
            pip install ruff black mypy bandit
            ruff check .
            black --check .
            mypy .
            bandit -r . -ll
          fi

  lint-frontend:
    name: Lint Frontend (TypeScript)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run TypeScript linting
        run: |
          if [ -f "Makefile" ]; then
            make lint-typescript
          else
            echo "Running basic TypeScript linting..."
            cd frontend 2>/dev/null || true
            npm ci
            npm run lint
            npm run type-check
          fi

  test-backend:
    name: Test Backend (Python)
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-backend]
    if: |
      always() &&
      needs.detect-changes.outputs.backend == 'true' &&
      (needs.lint-backend.result == 'success' || needs.lint-backend.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-backend-${{ hashFiles('**/Dockerfile*', '**/pyproject.toml', '**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-buildx-backend-
      - name: Run Python tests
        run: |
          if [ -f "Makefile" ]; then
            make test-python
          else
            pip install pytest pytest-cov
            pytest --cov --cov-report=xml
          fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: coverage.xml

  test-frontend:
    name: Test Frontend (TypeScript)
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-frontend]
    if: |
      always() &&
      needs.detect-changes.outputs.frontend == 'true' &&
      (needs.lint-frontend.result == 'success' || needs.lint-frontend.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-frontend-${{ hashFiles('**/Dockerfile*', '**/package*.json') }}
          restore-keys: ${{ runner.os }}-buildx-frontend-
      - name: Run TypeScript tests
        run: |
          if [ -f "Makefile" ]; then
            make test-typescript
          else
            cd frontend 2>/dev/null || true
            npm ci
            npm run test:coverage
          fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: |
      always() &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - name: Run integration tests
        run: |
          if [ -f "Makefile" ] && grep -q "test-integration" Makefile; then
            make test-integration
          else
            echo "No integration tests configured - skipping"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-backend, lint-frontend, test-backend, test-frontend, integration-tests]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## ðŸŽ¯ Full-Stack CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“Š Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.detect-changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.detect-changes.outputs.tests }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Lint Backend: ${{ needs.lint-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint Frontend: ${{ needs.lint-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Backend: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Frontend: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
