# GitHub Actions CI/CD Plugin Manifest

name: github-actions
version: 1.0.0
type: infrastructure
category: ci-cd
description: Complete GitHub Actions CI/CD pipeline with automated testing, linting, building, and deployment
author: ai-projen framework
last_updated: 2025-10-01

# Plugin metadata
metadata:
  platform: github
  workflow_engine: github-actions
  supports_matrix_builds: true
  supports_docker: true
  supports_aws_deployment: true
  supports_caching: true

# How-to guides
howtos:
  directory: howtos/
  available:
    - name: add-workflow
      file: how-to-add-workflow.md
      title: "How to: Add a GitHub Actions Workflow"
      description: "Create custom CI/CD workflows with proper triggers and jobs"
      difficulty: intermediate
      estimated_time: 30-45 min
      prerequisites:
        - "GitHub Actions plugin installed"
        - "GitHub repository configured"
        - "Understanding of YAML syntax"
      tags:
        - ci-cd
        - github-actions
        - automation
        - workflows
      templates_used:
        - templates/ci-python.yml
        - templates/ci-typescript.yml
      related:
        - configure-secrets
        - add-deployment

    - name: configure-secrets
      file: how-to-configure-secrets.md
      title: "How to: Configure GitHub Secrets"
      description: "Set up repository secrets for secure CI/CD operations"
      difficulty: beginner
      estimated_time: 15-20 min
      prerequisites:
        - "GitHub repository access"
        - "Admin permissions"
      tags:
        - ci-cd
        - security
        - secrets
        - github-actions
      templates_used: []
      related:
        - add-workflow
        - add-deployment

    - name: add-deployment
      file: how-to-add-deployment.md
      title: "How to: Add AWS Deployment Workflow"
      description: "Configure automated deployment to AWS ECS with ECR image building"
      difficulty: advanced
      estimated_time: 60-90 min
      prerequisites:
        - "GitHub Actions plugin installed"
        - "AWS account configured"
        - "ECS infrastructure deployed"
        - "OIDC authentication setup"
      tags:
        - ci-cd
        - deployment
        - aws
        - ecs
        - ecr
      templates_used:
        - templates/deploy-aws.yml
        - templates/build-ecr.yml
      related:
        - configure-secrets
        - add-workflow

# Templates
templates:
  directory: templates/
  available:
    - name: ci-python
      file: ci-python.yml
      description: "Python CI workflow with pytest, ruff, black, mypy, and bandit"
      category: ci
      placeholders:
        - PROJECT_NAME
        - PYTHON_VERSION
        - POETRY_VERSION
      features:
        - Matrix testing across Python versions
        - Docker-based linting containers
        - Parallel test execution
        - Code coverage reporting
        - Security scanning with bandit
        - Type checking with mypy
        - Registry-based Docker caching

    - name: ci-typescript
      file: ci-typescript.yml
      description: "TypeScript/React CI workflow with vitest, eslint, and prettier"
      category: ci
      placeholders:
        - PROJECT_NAME
        - NODE_VERSION
      features:
        - Matrix testing across Node versions
        - Docker-based linting containers
        - Component testing with Vitest
        - Type checking with tsc
        - Code coverage reporting
        - Registry-based Docker caching

    - name: ci-full-stack
      file: ci-full-stack.yml
      description: "Full-stack CI workflow combining Python backend and TypeScript frontend"
      category: ci
      placeholders:
        - PROJECT_NAME
        - PYTHON_VERSION
        - NODE_VERSION
      features:
        - Parallel backend and frontend testing
        - Integration test support
        - Change detection for selective testing
        - Combined coverage reporting
        - Multi-stage Docker builds

    - name: build-ecr
      file: build-ecr.yml
      description: "Build and push Docker images to AWS ECR with multi-architecture support"
      category: build
      placeholders:
        - AWS_REGION
        - ECR_REPOSITORY_FRONTEND
        - ECR_REPOSITORY_BACKEND
      features:
        - Multi-platform builds (amd64/arm64)
        - GitHub Actions cache
        - OIDC authentication
        - Comprehensive tagging strategy
        - Waits for tests to pass

    - name: deploy-aws
      file: deploy-aws.yml
      description: "Deploy containers to AWS ECS with environment configuration"
      category: deployment
      placeholders:
        - AWS_REGION
        - ECS_CLUSTER
        - ECS_SERVICE_FRONTEND
        - ECS_SERVICE_BACKEND
      features:
        - Multi-environment support (dev/staging/prod)
        - Zero-downtime deployment
        - Service health monitoring
        - Rollback capabilities
        - Manual and automated triggers

    - name: release
      file: release.yml
      description: "Automated release workflow with versioning and changelog generation"
      category: release
      placeholders:
        - PROJECT_NAME
      features:
        - Semantic versioning
        - Automated changelog
        - GitHub release creation
        - Asset upload support
        - Tag management

# Standards
standards:
  directory: standards/
  file: CI_CD_STANDARDS.md
  highlights:
    - "Docker-first CI/CD with dedicated linting containers"
    - "Registry-based caching for 80-90% faster builds"
    - "Matrix testing across multiple language versions"
    - "Comprehensive security scanning and type checking"
    - "Zero-downtime deployments with health checks"
    - "Environment-specific configuration management"

# Dependencies
dependencies:
  required:
    - github: "repository"
  optional:
    - docker: ">=20.10"
    - aws-cli: ">=2.0"
    - language-plugin: "python or typescript"

# Integration
integrates_with:
  - name: python
    required: false
    description: "Python CI/CD workflows with pytest, ruff, mypy, bandit"
  - name: typescript
    required: false
    description: "TypeScript CI/CD workflows with vitest, eslint, prettier"
  - name: docker
    required: false
    description: "Docker-based CI/CD with dedicated linting containers"
  - name: terraform-aws
    required: false
    description: "AWS deployment workflows for ECS"

# Usage
usage:
  quick_start:
    - "Copy workflow templates to .github/workflows/"
    - "Configure GitHub secrets (AWS credentials, tokens)"
    - "Customize workflow files for your project"
    - "Push to GitHub to trigger workflows"
    - "Monitor workflow runs in Actions tab"
  common_workflows:
    - workflow: "ci-python.yml"
      description: "Python linting and testing"
      triggers: "pull_request, push to main"
    - workflow: "ci-typescript.yml"
      description: "TypeScript linting and testing"
      triggers: "pull_request, push to main"
    - workflow: "build-ecr.yml"
      description: "Build and push Docker images"
      triggers: "push to main (after tests pass)"
    - workflow: "deploy-aws.yml"
      description: "Deploy to AWS ECS"
      triggers: "push to main, manual dispatch"
    - workflow: "release.yml"
      description: "Create releases with versioning"
      triggers: "manual dispatch, tag creation"

# Features
features:
  caching:
    - "GitHub Actions cache for dependencies"
    - "Docker registry cache (GHCR) for images"
    - "Layer caching with BuildKit"
    - "Conditional rebuilds based on file changes"
  performance:
    - "Parallel job execution"
    - "Matrix builds for multi-version testing"
    - "Selective test execution based on changes"
    - "80-90% faster builds with registry caching"
  security:
    - "OIDC authentication for AWS"
    - "Secrets management with GitHub Secrets"
    - "Security scanning with bandit"
    - "Dependency vulnerability scanning"
  deployment:
    - "Multi-environment support (dev/staging/prod)"
    - "Zero-downtime ECS deployments"
    - "Health monitoring and verification"
    - "Rollback capabilities"

# References
references:
  documentation:
    - name: "Plugin README"
      file: README.md
    - name: "Agent Instructions"
      file: AGENT_INSTRUCTIONS.md
    - name: "CI/CD Standards"
      file: standards/CI_CD_STANDARDS.md
  external:
    - name: "GitHub Actions Documentation"
      url: "https://docs.github.com/en/actions"
    - name: "Docker BuildKit"
      url: "https://docs.docker.com/build/buildkit/"
    - name: "AWS ECS Deployment"
      url: "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html"
    - name: "GitHub Container Registry"
      url: "https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"
