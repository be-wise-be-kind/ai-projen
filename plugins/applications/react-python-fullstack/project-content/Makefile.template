# Production-Ready React-Python Fullstack Makefile
# Composite quality gate targets for clean namespace

.PHONY: help install clean
.PHONY: lint-backend lint-backend-all lint-backend-security lint-backend-complexity lint-backend-full
.PHONY: lint-frontend lint-frontend-all lint-frontend-security lint-frontend-full
.PHONY: lint-all lint-full test-all format

# Default target
.DEFAULT_GOAL := help

help: ## Show this help message
	@echo "╔════════════════════════════════════════════════════════════╗"
	@echo "║    Production-Ready React-Python Fullstack Commands       ║"
	@echo "╚════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "🚀 Quick Start:"
	@echo "  make install           - Install all dependencies"
	@echo "  make lint-all          - Thorough quality check (before commit)"
	@echo "  make lint-full         - ALL quality gates (before PR)"
	@echo "  make test-all          - Run all tests with coverage"
	@echo ""
	@echo "🔧 Development (Fast Feedback):"
	@echo "  make lint-backend      - Fast backend linting (Ruff)"
	@echo "  make lint-frontend     - Fast frontend linting (ESLint)"
	@echo ""
	@echo "📊 Comprehensive (Before PR):"
	@echo "  make lint-backend-full - ALL backend tools (9 tools)"
	@echo "  make lint-frontend-full- ALL frontend tools (6 tools)"
	@echo "  make lint-full         - Everything (15+ tools)"
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-25s %s\n", $$1, $$2}'

# Installation
install: ## Install all dependencies (backend + frontend)
	@echo "📦 Installing backend dependencies..."
	@cd backend && poetry install
	@echo "📦 Installing frontend dependencies..."
	@cd frontend && npm install
	@echo "✅ All dependencies installed!"

# Backend Linting Targets
lint-backend: ## Fast backend linting (Ruff - use during development)
	@echo "🔍 Running fast backend linting (Ruff)..."
	@cd backend && poetry run ruff check src/ tests/
	@cd backend && poetry run ruff format --check src/ tests/

lint-backend-all: ## Comprehensive backend linting (Ruff + Pylint + Flake8 + MyPy)
	@echo "🔍 Running comprehensive backend linting..."
	@cd backend && poetry run ruff check src/ tests/
	@cd backend && poetry run ruff format --check src/ tests/
	@cd backend && poetry run pylint src/
	@cd backend && poetry run flake8 src/ tests/
	@cd backend && poetry run mypy src/

lint-backend-security: ## Backend security scanning (Bandit + Safety + pip-audit)
	@echo "🔒 Running backend security scans..."
	@cd backend && poetry run bandit -r src/ -q
	@cd backend && poetry run safety check --json || true
	@cd backend && poetry run pip-audit || true

lint-backend-complexity: ## Backend complexity analysis (Radon + Xenon)
	@echo "📊 Analyzing backend complexity..."
	@cd backend && poetry run radon cc src/ -a -s
	@cd backend && poetry run radon mi src/ -s
	@cd backend && poetry run xenon --max-absolute B --max-modules B --max-average A src/

lint-backend-full: lint-backend-all lint-backend-security lint-backend-complexity ## ALL backend quality checks (9 tools)
	@echo "✅ All backend linting complete!"

# Frontend Linting Targets
lint-frontend: ## Fast frontend linting (ESLint - use during development)
	@echo "🔍 Running fast frontend linting (ESLint)..."
	@cd frontend && npm run lint

lint-frontend-all: ## Comprehensive frontend linting (ESLint + TypeScript strict)
	@echo "🔍 Running comprehensive frontend linting..."
	@cd frontend && npm run lint
	@cd frontend && npx tsc --noEmit --strict

lint-frontend-security: ## Frontend security scanning (npm audit)
	@echo "🔒 Running frontend security scan..."
	@cd frontend && npm audit --audit-level=moderate || true

lint-frontend-full: lint-frontend-all lint-frontend-security ## ALL frontend quality checks (6 tools)
	@echo "✅ All frontend linting complete!"

# Combined Targets
lint-all: lint-backend-all lint-frontend-all ## Thorough quality check (before commit)
	@echo "✅ All comprehensive linting complete!"

lint-full: lint-backend-full lint-frontend-full ## ALL quality gates (before PR)
	@echo "✅ ALL quality gates passed! Ready for PR."

# Testing Targets
test-backend: ## Run backend tests with coverage
	@cd backend && poetry run pytest --cov=src --cov-report=term --cov-report=html -v

test-frontend: ## Run frontend tests with coverage
	@cd frontend && npm run test:coverage

test-e2e: ## Run E2E tests with Playwright
	@cd frontend && npm run test:e2e

test-all: test-backend test-frontend ## Run all tests (backend + frontend)
	@echo "✅ All tests passed!"

# Formatting Targets
format-backend: ## Auto-fix backend formatting
	@cd backend && poetry run ruff format src/ tests/
	@cd backend && poetry run ruff check --fix src/ tests/

format-frontend: ## Auto-fix frontend formatting
	@cd frontend && npm run format

format: format-backend format-frontend ## Auto-fix all formatting

# Cleanup
clean: ## Clean cache and artifacts
	@echo "🧹 Cleaning backend..."
	@cd backend && find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@cd backend && find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	@cd backend && find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@cd backend && find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	@cd backend && find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
	@cd backend && rm -rf htmlcov/ .coverage 2>/dev/null || true
	@echo "🧹 Cleaning frontend..."
	@cd frontend && rm -rf node_modules/.cache coverage/ .vitest/ 2>/dev/null || true
	@echo "✅ Cleaned cache and artifacts"
