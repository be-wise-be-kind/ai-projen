# Production-Ready React-Python Fullstack Makefile
# Main orchestration - specific targets defined in split Makefiles

.PHONY: help install clean

# Default target
.DEFAULT_GOAL := help

help: ## Show this help message
	@echo "╔════════════════════════════════════════════════════════════╗"
	@echo "║    Production-Ready React-Python Fullstack Commands       ║"
	@echo "╚════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "🚀 Quick Start:"
	@echo "  make install           - Install all dependencies"
	@echo "  make lint-all          - Thorough quality check (before commit)"
	@echo "  make lint-full         - ALL quality gates (before PR)"
	@echo "  make test-all          - Run all tests with coverage"
	@echo ""
	@echo "🔧 Development (Fast Feedback):"
	@echo "  make lint-backend      - Fast backend linting (Ruff)"
	@echo "  make lint-frontend     - Fast frontend linting (ESLint)"
	@echo ""
	@echo "📊 Comprehensive (Before PR):"
	@echo "  make lint-backend-full - ALL backend tools (9 tools)"
	@echo "  make lint-frontend-full- ALL frontend tools (6 tools)"
	@echo "  make lint-full         - Everything (15+ tools)"
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-25s %s\n", $$1, $$2}'

# Installation
install: ## Install all dependencies (backend + frontend)
	@echo "📦 Installing backend dependencies..."
	@cd {{PROJECT_NAME}}-app/backend && poetry install
	@echo "📦 Installing frontend dependencies..."
	@cd {{PROJECT_NAME}}-app/frontend && npm install
	@echo "✅ All dependencies installed!"

# Cleanup
clean: ## Clean cache and artifacts
	@echo "🧹 Cleaning backend..."
	@cd {{PROJECT_NAME}}-app/backend && find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@cd {{PROJECT_NAME}}-app/backend && find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	@cd {{PROJECT_NAME}}-app/backend && find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@cd {{PROJECT_NAME}}-app/backend && find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	@cd {{PROJECT_NAME}}-app/backend && find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true
	@cd {{PROJECT_NAME}}-app/backend && rm -rf htmlcov/ .coverage 2>/dev/null || true
	@echo "🧹 Cleaning frontend..."
	@cd {{PROJECT_NAME}}-app/frontend && rm -rf node_modules/.cache coverage/ .vitest/ 2>/dev/null || true
	@echo "✅ Cleaned cache and artifacts"

# Include split Makefile modules
-include Makefile.lint
-include Makefile.test
-include Makefile.gh
-include Makefile.infra
