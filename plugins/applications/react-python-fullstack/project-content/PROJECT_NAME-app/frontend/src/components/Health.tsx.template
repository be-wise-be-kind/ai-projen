/**
 * Purpose: Health check component displaying backend API health status
 *
 * Scope: Health monitoring UI component
 *
 * Overview: Displays backend API health status by fetching from /health endpoint. Shows
 *     connection status, version information, and error states. Useful for debugging
 *     and verifying frontend-backend communication. Includes refresh functionality
 *     and loading states.
 *
 * Dependencies: React, API client
 *
 * Exports: Health component as default export
 *
 * State/Behavior: Manages health check data, loading, and error states
 */

import { useState, useEffect } from 'react';
import { apiClient, ApiError } from '../api/client';
import styles from './Health.module.css';

interface HealthData {
  status: string;
  timestamp: string;
  version: string;
  python_version: string;
}

export default function Health() {
  const [health, setHealth] = useState<HealthData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchHealth = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await apiClient.get<HealthData>('/health');
      setHealth(data);
    } catch (err) {
      if (err instanceof ApiError) {
        setError(err.message);
      } else {
        setError('Failed to fetch health status');
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchHealth();
  }, []);

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>Checking backend health...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>
          <h3>Backend Connection Error</h3>
          <p>{error}</p>
          <button onClick={fetchHealth} className={styles.retryButton}>
            Retry
          </button>
        </div>
      </div>
    );
  }

  if (!health) {
    return null;
  }

  return (
    <div className={styles.container}>
      <div className={styles.healthCard}>
        <div className={styles.header}>
          <h3>Backend Health Status</h3>
          <button onClick={fetchHealth} className={styles.refreshButton}>
            üîÑ Refresh
          </button>
        </div>

        <div className={styles.status}>
          <span className={styles.statusIndicator}>‚óè</span>
          <span className={styles.statusText}>
            {health.status === 'healthy' ? 'Healthy' : health.status}
          </span>
        </div>

        <div className={styles.details}>
          <div className={styles.detailRow}>
            <span className={styles.label}>API Version:</span>
            <span className={styles.value}>{health.version}</span>
          </div>

          <div className={styles.detailRow}>
            <span className={styles.label}>Python Version:</span>
            <span className={styles.value}>{health.python_version}</span>
          </div>

          <div className={styles.detailRow}>
            <span className={styles.label}>Last Check:</span>
            <span className={styles.value}>
              {new Date(health.timestamp).toLocaleString()}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}
