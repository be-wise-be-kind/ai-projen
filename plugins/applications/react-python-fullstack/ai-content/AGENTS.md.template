# AI Agent Guide - Production-Ready Fullstack Application

**Purpose**: Quick reference guide for AI agents working on this fullstack application

**Scope**: Common development tasks, quality workflows, testing procedures, and deployment operations

**Overview**: Comprehensive guide for AI agents to quickly understand and work with this production-ready
    fullstack application. Covers all 15+ quality tools, progressive quality workflows, backend and frontend
    development patterns, testing strategies, optional features (UI scaffold, Terraform), and deployment procedures.
    Provides quick reference for common tasks and links to detailed how-to guides for complex operations.

---

## What This Application Provides

This is a **production-ready fullstack application** with ALL quality gates pre-configured:

- **Backend**: Python FastAPI with 9 comprehensive quality tools
- **Frontend**: React TypeScript with 6 comprehensive quality tools
- **Infrastructure**: Docker Compose orchestration, PostgreSQL database
- **CI/CD**: GitHub Actions automated testing and deployment
- **Optional Features**: UI scaffold (if installed), Terraform AWS deployment (if installed)

**Total**: 15+ tools automatically installed and configured with zero manual setup required.

---

## Quick Start for AI Agents

### Before Making Changes

1. **Understand the codebase structure**:
```bash
# View project structure
tree -L 2 .

# Check what's installed
./scripts/validate-fullstack-setup.sh
```

2. **Choose appropriate quality level**:
- Fast iteration: `make lint-backend` or `make lint-frontend` (~3 seconds)
- Before commit: `make lint-all` (~30 seconds)
- Before PR: `make lint-full` (~2 minutes)

3. **Run existing tests**:
```bash
make test-all  # Ensure baseline passes
```

---

## Common Development Tasks

### Backend Development

#### Add API Endpoint

**How-To Guide**: `.ai/howto/fullstack/how-to-add-api-endpoint.md`

**Quick Steps**:
1. Create model in `backend/src/models/`
2. Create schemas in `backend/src/schemas/`
3. Create service in `backend/src/services/`
4. Create router in `backend/src/routers/`
5. Register router in `backend/src/main.py`
6. Write tests in `backend/tests/`
7. Run quality checks:
```bash
make lint-backend-all  # Ruff + Pylint + Flake8 + MyPy
make test-backend      # All backend tests
```

#### Modify Existing Endpoint

**Pattern**:
1. Locate router in `backend/src/routers/`
2. Update schemas in `backend/src/schemas/` if needed
3. Modify service logic in `backend/src/services/`
4. Update tests in `backend/tests/`
5. Validate:
```bash
make lint-backend-all
make test-backend
```

#### Add Database Model

**Pattern**:
1. Create SQLAlchemy model in `backend/src/models/`
2. Create Alembic migration: `cd backend && poetry run alembic revision --autogenerate -m "description"`
3. Review migration file
4. Apply migration: `cd backend && poetry run alembic upgrade head`
5. Update schemas and services
6. Write tests

#### Backend Quality Checks

**Fast (during development)**:
```bash
make lint-backend  # Ruff only (~1-2 seconds)
```

**Thorough (before commit)**:
```bash
make lint-backend-all  # Ruff + Pylint + Flake8 + MyPy (~20-30 seconds)
```

**Comprehensive (before PR)**:
```bash
make lint-backend-full  # All 9 tools including security + complexity (~1-2 minutes)
```

### Frontend Development

#### Add New Page

**How-To Guide**: `.ai/howto/fullstack/how-to-add-frontend-page.md`

**Quick Steps**:
1. Create page component in `frontend/src/pages/`
2. Create CSS module `ComponentName.module.css`
3. Add route in `frontend/src/App.tsx`
4. Add navigation link if needed
5. Write tests in `frontend/src/__tests__/`
6. Run quality checks:
```bash
make lint-frontend-all  # ESLint + TypeScript
make test-frontend      # All frontend tests
```

#### Connect to API

**How-To Guide**: `.ai/howto/fullstack/how-to-connect-frontend-to-api.md`

**Quick Steps**:
1. Define TypeScript types in `frontend/src/types/api.ts`
2. Create API module in `frontend/src/api/`
3. Use API client with error handling
4. Handle loading and error states
5. Write tests for API integration

#### Modify Existing Component

**Pattern**:
1. Locate component in `frontend/src/components/` or `frontend/src/pages/`
2. Update component logic
3. Update CSS module if styling changes
4. Update tests
5. Validate:
```bash
make lint-frontend-all
make test-frontend
```

#### Frontend Quality Checks

**Fast (during development)**:
```bash
make lint-frontend  # ESLint only (~1-2 seconds)
```

**Thorough (before commit)**:
```bash
make lint-frontend-all  # ESLint + TypeScript strict (~10-15 seconds)
```

**Comprehensive (before PR)**:
```bash
make lint-frontend-full  # All 6 tools including security (~30-60 seconds)
```

---

## Optional Features

### UI Scaffold (If Installed)

**Check if installed**:
```bash
test -d frontend/src/components/AppShell && echo "UI Scaffold: INSTALLED" || echo "UI Scaffold: NOT INSTALLED"
```

#### Modify Hero Section

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-modify-hero-section.md`

**Quick Steps**:
1. Edit `frontend/src/pages/HomePage.tsx`
2. Modify hero cards or banner content
3. Update CSS in `HomePage.module.css`
4. Test responsiveness

#### Add New Tab

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-add-tab.md`

**Quick Steps**:
1. Copy template: `.ai/templates/tab-component.tsx.template`
2. Create new tab component in `frontend/src/pages/`
3. Add to `frontend/src/config/tabs.config.ts`
4. Import in `App.tsx`
5. Test navigation

#### Modify Tab Content

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-modify-tab-content.md`

**Quick Steps**:
1. Locate tab in `frontend/src/pages/`
2. Add content sections
3. Update styling
4. Test functionality

#### Add Hero Card

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-add-hero-card.md`

**Template**: `.ai/templates/hero-card.tsx.template`

#### Add Principle Card

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-add-principle-card.md`

**Template**: `.ai/templates/principle-card.ts.template`

### Terraform Deployment (If Installed)

**Check if installed**:
```bash
test -d infra/terraform && echo "Terraform: INSTALLED" || echo "Terraform: NOT INSTALLED"
```

#### Deploy to AWS

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-deploy-to-aws.md`

**Quick Steps**:
1. Configure AWS credentials
2. Bootstrap Terraform backend: `make -f Makefile.infra bootstrap ENV=dev`
3. Initialize base workspace: `make -f Makefile.infra init-base ENV=dev`
4. Plan infrastructure: `make -f Makefile.infra plan-base ENV=dev`
5. Apply infrastructure: `make -f Makefile.infra apply-base ENV=dev`

#### Manage Infrastructure

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-manage-terraform-infrastructure.md`

**Common Operations**:
```bash
# View infrastructure status
make -f Makefile.infra show-base ENV=dev

# Update infrastructure
make -f Makefile.infra plan-base ENV=dev
make -f Makefile.infra apply-base ENV=dev

# Destroy infrastructure (careful!)
make -f Makefile.infra destroy-base ENV=dev
```

#### Setup Workspaces

**How-To Guide**: `.ai/howto/react-python-fullstack/how-to-setup-terraform-workspaces.md`

---

## Testing Workflows

### Backend Testing

**Run all backend tests**:
```bash
make test-backend
```

**Run specific test file**:
```bash
cd backend
poetry run pytest tests/test_specific.py
```

**Run with coverage**:
```bash
cd backend
poetry run pytest --cov=src --cov-report=html
```

**Coverage report**: `backend/htmlcov/index.html`

### Frontend Testing

**Run all frontend tests**:
```bash
make test-frontend
```

**Run in watch mode**:
```bash
cd frontend
npm test -- --watch
```

**Run with coverage**:
```bash
cd frontend
npm run test:coverage
```

**Coverage report**: `frontend/coverage/index.html`

### E2E Testing (Playwright)

**Run E2E tests**:
```bash
cd frontend
npm run test:e2e
```

**Run E2E tests with UI**:
```bash
cd frontend
npx playwright test --ui
```

### Complete Test Suite

**Run everything**:
```bash
make test-all  # Backend + Frontend tests with coverage
```

---

## Quality Workflows

### Progressive Quality Levels

#### Fast Feedback (During Development)
**Time**: ~3 seconds
**Use**: Rapid iteration, instant feedback

```bash
make lint-backend   # Ruff only
make lint-frontend  # ESLint only
```

#### Thorough Check (Before Commit)
**Time**: ~30 seconds
**Use**: Pre-commit validation, comprehensive but fast

```bash
make lint-all  # All core linters for both stacks
```

**What runs**:
- Backend: Ruff + Pylint + Flake8 + MyPy
- Frontend: ESLint + TypeScript strict

#### Comprehensive Gate (Before PR)
**Time**: ~2 minutes
**Use**: Complete quality gate before pull request

```bash
make lint-full  # ALL 15+ tools
```

**What runs**:
- Everything from `lint-all` PLUS:
- Backend: Bandit + Radon + Xenon + Safety + pip-audit
- Frontend: npm audit + Playwright checks

### Auto-Fix Issues

**Backend formatting**:
```bash
make format-backend  # Auto-fix with Ruff
```

**Frontend formatting**:
```bash
make format-frontend  # Auto-fix with Prettier + ESLint
```

**Both**:
```bash
make format  # Fix all formatting issues
```

---

## Database Operations

### Migrations

**Create migration**:
```bash
cd backend
poetry run alembic revision --autogenerate -m "description"
```

**Apply migrations**:
```bash
cd backend
poetry run alembic upgrade head
```

**Rollback migration**:
```bash
cd backend
poetry run alembic downgrade -1
```

**View migration history**:
```bash
cd backend
poetry run alembic history
```

### Database Access

**Via Docker**:
```bash
docker-compose exec db psql -U postgres -d app_db
```

**Backup**:
```bash
docker-compose exec db pg_dump -U postgres app_db > backup.sql
```

**Restore**:
```bash
cat backup.sql | docker-compose exec -T db psql -U postgres -d app_db
```

---

## Docker Operations

### Start Services

**Start all**:
```bash
docker-compose up
```

**Start in background**:
```bash
docker-compose up -d
```

**Rebuild and start**:
```bash
docker-compose up --build
```

### View Logs

**All services**:
```bash
docker-compose logs -f
```

**Specific service**:
```bash
docker-compose logs -f backend
docker-compose logs -f frontend
docker-compose logs -f db
```

### Access Containers

**Backend shell**:
```bash
docker-compose exec backend bash
```

**Frontend shell**:
```bash
docker-compose exec frontend sh
```

**Database shell**:
```bash
docker-compose exec db psql -U postgres -d app_db
```

### Stop Services

**Stop all**:
```bash
docker-compose down
```

**Stop and remove volumes** (WARNING: deletes data):
```bash
docker-compose down -v
```

---

## Validation & Health Checks

### Validate Complete Setup

**Run validation script**:
```bash
./scripts/validate-fullstack-setup.sh
```

**Verbose output**:
```bash
./scripts/validate-fullstack-setup.sh --verbose
```

**Skip optional features**:
```bash
./scripts/validate-fullstack-setup.sh --skip-optional
```

### Health Checks

**Backend health**:
```bash
curl http://localhost:8000/health
```

**Frontend**:
```bash
curl http://localhost:5173
```

**Database**:
```bash
docker-compose exec db pg_isready -U postgres
```

---

## CI/CD

### GitHub Actions Workflows

**Workflows location**: `.github/workflows/`

**CI workflow**: Runs on every PR
- Lints backend and frontend
- Runs all tests
- Checks security scans

**Deploy workflow**: Runs on main branch merge
- Builds Docker images
- Deploys to staging/production
- Runs smoke tests

### Local CI Simulation

**Run what CI runs**:
```bash
make lint-full  # All quality gates
make test-all   # All tests
./scripts/validate-fullstack-setup.sh  # Complete validation
```

---

## Common Patterns

### Error Handling

**Backend (FastAPI)**:
```python
from fastapi import HTTPException

raise HTTPException(status_code=404, detail="Item not found")
```

**Frontend (React)**:
```typescript
try {
  const data = await apiClient.get('/endpoint');
  setData(data);
} catch (error) {
  setError(error.message);
} finally {
  setLoading(false);
}
```

### Authentication

**Backend (JWT)**:
```python
from fastapi import Depends
from backend.src.auth import get_current_user

@router.get("/protected")
async def protected_route(user = Depends(get_current_user)):
    return {"user": user}
```

**Frontend (Auth Context)**:
```typescript
import { useAuth } from './contexts/AuthContext';

const { user, login, logout } = useAuth();
```

### API Client

**Frontend usage**:
```typescript
import apiClient from './api/client';

const response = await apiClient.get('/users');
const user = await apiClient.post('/users', userData);
```

---

## Troubleshooting

### Services won't start

```bash
# Check logs
docker-compose logs

# Rebuild without cache
docker-compose build --no-cache

# Remove all and restart
docker-compose down -v
docker-compose up --build
```

### Frontend can't connect to backend

1. Check `VITE_API_URL` in `frontend/.env`
2. Check `CORS_ORIGINS` in `backend/.env`
3. Verify backend is running: `curl http://localhost:8000/health`

### Database connection issues

1. Check database is running: `docker-compose ps`
2. Check `DATABASE_URL` in `backend/.env`
3. View database logs: `docker-compose logs db`

### Tests failing

1. Ensure services are running: `docker-compose ps`
2. Check test database is clean
3. Run with verbose output: `pytest -v` or `npm test -- --verbose`

### Linting errors

1. Try auto-fix: `make format`
2. Check specific tool output: `cd backend && poetry run ruff check --verbose`
3. Review tool configuration in `pyproject.toml` or `package.json`

---

## Documentation Reference

### How-To Guides (`.ai/howto/`)

**Fullstack Guides**:
- `how-to-add-api-endpoint.md` - Adding backend endpoints
- `how-to-add-frontend-page.md` - Adding frontend pages
- `how-to-connect-frontend-to-api.md` - API integration patterns

**UI Scaffold Guides** (if installed):
- `how-to-modify-hero-section.md` - Customizing hero banner
- `how-to-add-hero-card.md` - Adding feature cards
- `how-to-add-tab.md` - Creating new tab pages
- `how-to-modify-tab-content.md` - Populating tabs
- `how-to-add-principle-card.md` - Adding principle cards

**Terraform Guides** (if installed):
- `how-to-deploy-to-aws.md` - AWS deployment procedures
- `how-to-manage-terraform-infrastructure.md` - Infrastructure operations
- `how-to-setup-terraform-workspaces.md` - Multi-environment setup

### Architecture Docs (`.ai/docs/`)

- `fullstack-architecture.md` - System architecture overview
- `api-frontend-integration.md` - Integration patterns
- `PRODUCTION_READY_STANDARDS.md` - Production standards
- `UI_ARCHITECTURE.md` - UI design patterns (if UI scaffold installed)
- `STYLING_SYSTEM.md` - CSS architecture (if UI scaffold installed)
- `COMPONENT_PATTERNS.md` - Component patterns (if UI scaffold installed)
- `TERRAFORM_ARCHITECTURE.md` - Infrastructure architecture (if Terraform installed)
- `DEPLOYMENT_GUIDE.md` - Deployment procedures (if Terraform installed)
- `INFRASTRUCTURE_PRINCIPLES.md` - Infrastructure principles (if Terraform installed)

### Templates (`.ai/templates/`)

- `hero-card.tsx.template` - Hero card template (if UI scaffold installed)
- `tab-component.tsx.template` - Tab component template (if UI scaffold installed)
- `principle-card.ts.template` - Principle card template (if UI scaffold installed)

---

## Key Takeaways for AI Agents

1. **Use Progressive Quality**: Fast → Thorough → Comprehensive based on context
2. **Follow How-To Guides**: Detailed guides exist for all common tasks
3. **Validate Before Commit**: Always run `make lint-all` before committing
4. **Run Full Gate Before PR**: Always run `make lint-full` before creating PR
5. **Check Optional Features**: UI scaffold and Terraform may or may not be installed
6. **Use Validation Script**: `./scripts/validate-fullstack-setup.sh` confirms setup
7. **Consult Documentation**: Complete docs in `.ai/howto/` and `.ai/docs/`

---

**This application is production-ready from day one. All tools are pre-configured. Zero additional setup required.**
