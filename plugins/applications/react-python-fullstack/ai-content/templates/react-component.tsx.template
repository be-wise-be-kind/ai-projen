/**
 * Purpose: Template for creating new React components with TypeScript
 * Scope: Reusable React component creation with props, state, and styling
 * Overview: Template for generating React functional components with TypeScript interfaces,
 *     props validation, state management, event handlers, and CSS modules. Replace placeholders
 *     with actual component names and customize functionality as needed.
 *
 * Placeholders:
 *   {{ComponentName}}: Component name in PascalCase (e.g., "TaskCard", "UserProfile")
 *     - Type: string (valid React component name)
 *     - Example: "TaskCard"
 *     - Required: yes
 *
 *   {{component-name}}: Component name in kebab-case for file naming
 *     - Type: string
 *     - Example: "task-card"
 *     - Required: yes
 *
 *   {{PURPOSE}}: Brief description of component's purpose
 *     - Type: string
 *     - Example: "Displays task information in a card layout"
 *     - Required: yes
 *
 *   {{DESCRIPTION}}: Detailed description of component functionality
 *     - Type: string
 *     - Example: "Shows task title, description, status, and action buttons"
 *     - Required: yes
 *
 *   {{PROP_TYPE}}: Main data type for component props (e.g., "Task", "User")
 *     - Type: string (valid TypeScript type)
 *     - Example: "Task"
 *     - Required: yes
 *
 * Usage:
 *   1. Copy template to destination:
 *      cp .ai/templates/fullstack/react-component.tsx.template frontend/src/components/{{ComponentName}}.tsx
 *
 *   2. Replace all placeholders:
 *      - {{ComponentName}}: PascalCase component name
 *      - {{component-name}}: kebab-case file name
 *      - {{PURPOSE}}: component purpose
 *      - {{DESCRIPTION}}: detailed description
 *      - {{PROP_TYPE}}: props data type
 *
 *   3. Remove this template header (lines 1-50)
 *
 *   4. Create CSS module:
 *      touch frontend/src/components/{{ComponentName}}.module.css
 *
 *   5. Customize component:
 *      - Add/remove props
 *      - Implement event handlers
 *      - Add state management
 *      - Update styles
 *
 *   6. Create test file:
 *      cp .ai/templates/fullstack/component-test.tsx.template frontend/src/components/__tests__/{{ComponentName}}.test.tsx
 *
 *   7. Validate:
 *      npm run lint
 *      npm test {{ComponentName}}
 *
 * Related: how-to-add-frontend-page.md, React documentation, TypeScript documentation
 */

import { useState } from 'react';
import styles from './{{ComponentName}}.module.css';

// Import type definitions
import { {{PROP_TYPE}} } from '../types/api';

// Component props interface
interface {{ComponentName}}Props {
  {{PROP_TYPE}}: {{PROP_TYPE}};
  onEdit?: ({{PROP_TYPE}}: {{PROP_TYPE}}) => void;
  onDelete?: (id: number) => void;
  className?: string;
}

/**
 * {{ComponentName}} Component
 *
 * {{PURPOSE}}
 *
 * {{DESCRIPTION}}
 *
 * @param {{PROP_TYPE}} - {{PROP_TYPE}} data to display
 * @param onEdit - Optional callback when edit is clicked
 * @param onDelete - Optional callback when delete is clicked
 * @param className - Optional additional CSS class
 */
export default function {{ComponentName}}({
  {{PROP_TYPE}},
  onEdit,
  onDelete,
  className = '',
}: {{ComponentName}}Props) {
  // Local state for component-specific data
  const [isExpanded, setIsExpanded] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Event handlers
  const handleEdit = () => {
    if (onEdit) {
      onEdit({{PROP_TYPE}});
    }
  };

  const handleDelete = async () => {
    if (!onDelete) return;

    const confirmed = window.confirm('Are you sure you want to delete this item?');
    if (!confirmed) return;

    setIsLoading(true);
    try {
      await onDelete({{PROP_TYPE}}.id);
    } catch (error) {
      console.error('Error deleting:', error);
      alert('Failed to delete. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleToggle = () => {
    setIsExpanded(!isExpanded);
  };

  // Derived state
  const containerClass = `${styles.container} ${className}`;

  return (
    <div className={containerClass}>
      <div className={styles.header}>
        <h3 className={styles.title}>{{{PROP_TYPE}}.title}</h3>
        <button
          onClick={handleToggle}
          className={styles.toggleButton}
          aria-label={isExpanded ? 'Collapse' : 'Expand'}
          aria-expanded={isExpanded}
        >
          {isExpanded ? '▲' : '▼'}
        </button>
      </div>

      {isExpanded && (
        <div className={styles.content}>
          {/* Add your content here */}
          <p className={styles.description}>
            {/* Example: Display description or other fields */}
            Content goes here
          </p>

          <div className={styles.metadata}>
            {/* Example: Display metadata */}
            <span className={styles.date}>
              Created: {new Date({{PROP_TYPE}}.created_at).toLocaleDateString()}
            </span>
          </div>
        </div>
      )}

      {(onEdit || onDelete) && (
        <div className={styles.actions}>
          {onEdit && (
            <button
              onClick={handleEdit}
              className={styles.editButton}
              disabled={isLoading}
            >
              Edit
            </button>
          )}

          {onDelete && (
            <button
              onClick={handleDelete}
              className={styles.deleteButton}
              disabled={isLoading}
            >
              {isLoading ? 'Deleting...' : 'Delete'}
            </button>
          )}
        </div>
      )}
    </div>
  );
}

// Optional: Memoized version for performance
// import { memo } from 'react';
// export default memo({{ComponentName}});

// Optional: Named export for testing
// export { {{ComponentName}} };
