# Purpose: Python project configuration for CLI application using Poetry for dependency management
# Scope: Package metadata, dependencies, build configuration, and development tooling setup
# Overview: Comprehensive project configuration using Poetry for isolated virtual environments and dependency
#     management. Defines package metadata for PyPI distribution, runtime and development dependencies,
#     CLI entry points for installation, and configuration for development tools (ruff, pytest, mypy).
#     Uses Poetry to ensure isolated environments and prevent corrupting the user's machine.
# Dependencies: Poetry (>=1.5.0) for dependency management and virtual environment isolation
# Exports: Package configuration for Poetry, build tools, and development tooling
# Interfaces: Poetry build backend, isolated venv, ruff/pytest/mypy configuration
# Environment: Poetry-managed virtual environment (Python {{PYTHON_VERSION}})
# Related: poetry.lock, .ai/howtos/python-cli/how-to-package-cli-tool.md
# Philosophy: Don't corrupt the user's machine - all deps in isolated Poetry venv

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{PROJECT_NAME}}"
version = "1.0.0"
description = "{{PROJECT_DESCRIPTION}}"
authors = ["{{AUTHOR_NAME}} <{{AUTHOR_EMAIL}}>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}"
repository = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}"
documentation = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}#readme"
keywords = ["cli", "command-line", "tool"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: {{PYTHON_VERSION_MAJOR}}",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Environment :: Console",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^{{PYTHON_VERSION}}"
click = "^8.1.0"
pyyaml = "^6.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
types-pyyaml = "^6.0.0"

[tool.poetry.scripts]
{{PROJECT_NAME}} = "src.cli:cli"

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101"]  # Allow assert in tests

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
