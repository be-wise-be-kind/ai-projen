# Purpose: Python project configuration for CLI application with dependencies and tooling
# Scope: Package metadata, dependencies, build configuration, and development tooling setup
# Overview: Comprehensive project configuration using modern Python packaging standards (PEP 517/518/621).
#     Defines package metadata for PyPI distribution, runtime and development dependencies, CLI entry
#     points for installation, and configuration for development tools (ruff, pytest, mypy). Provides
#     single source of configuration for building, testing, and distributing the CLI application.
# Dependencies: setuptools and wheel for building, all runtime deps listed in dependencies section
# Exports: Package configuration for build tools, pip, and development tooling
# Interfaces: setuptools build backend, pip installation, ruff/pytest/mypy configuration
# Environment: Development and production Python environments (>=3.11)
# Related: setup.py (legacy), requirements.txt, .ai/howtos/python-cli/how-to-package-cli-tool.md

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{PROJECT_NAME}}"
version = "1.0.0"
description = "{{PROJECT_DESCRIPTION}}"
readme = "README.md"
authors = [
    {name = "{{AUTHOR_NAME}}", email = "{{AUTHOR_EMAIL}}"}
]
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Environment :: Console",
]
keywords = ["cli", "command-line", "tool"]

dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}"
Documentation = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}#readme"
Repository = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}"
Issues = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}/issues"

[project.scripts]
{{PROJECT_NAME}} = "src.cli:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
src = ["py.typed"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101"]  # Allow assert in tests

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
