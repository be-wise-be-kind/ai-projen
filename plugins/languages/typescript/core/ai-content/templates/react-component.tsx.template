/**
 * Purpose: Template for basic React component - simple presentational component
 *
 * Scope: Reusable UI components without complex state management
 *
 * Overview: Generates a basic React functional component with TypeScript type definitions,
 *     CSS Module integration, and props interface. Provides a foundation for presentational
 *     components that receive data through props and render UI without complex state logic
 *     or side effects. Includes TypeScript interface for component props with JSDoc comments,
 *     proper prop destructuring with default values, CSS Module styling integration, and
 *     usage example with JSDoc. The generated component follows React best practices with
 *     functional component pattern, named and default exports for flexibility, proper
 *     TypeScript typing for all props, and separation of concerns with external CSS Modules.
 *     Suitable for building design system components, reusable UI elements, and presentational
 *     components that compose into larger features.
 *
 * Dependencies: React 18+, CSS Modules support in bundler
 *
 * Exports: Component as named export and default export, Props interface for TypeScript consumers
 *
 * Placeholders:
 *     - {{COMPONENT_PURPOSE}}: Brief component purpose (e.g., "Display user information")
 *     - {{COMPONENT_SCOPE}}: Component usage scope (e.g., "User profile section")
 *     - {{COMPONENT_NAME}}: Component name in PascalCase (e.g., "UserCard", "ProductCard")
 *     - {{COMPONENT_DESCRIPTION}}: Detailed component description for JSDoc
 *     - {{PROP_NAME}}: Main prop field name (e.g., "userId", "title", "data")
 *     - {{PROP_TYPE}}: TypeScript type for main prop (e.g., "string", "number", "User")
 *     - {{PROP_DESCRIPTION}}: Description of main prop's purpose
 *     - {{EXAMPLE_VALUE}}: Example value for prop in JSDoc example
 *     - {{COMPONENT_IMPLEMENTATION}}: Description of main implementation logic
 *
 * Usage: Copy template to component directory, replace all {{PLACEHOLDERS}}, add additional props and logic, create matching CSS Module file
 *
 * Related: react-component-with-hooks.tsx.template for stateful components, component.module.css.template for styling
 *
 * Implementation: Functional component with TypeScript, CSS Modules for scoping, named and default exports, JSDoc documentation
 */

import React from 'react';
import styles from './{{COMPONENT_NAME}}.module.css';

/**
 * Props for the {{COMPONENT_NAME}} component
 */
interface {{COMPONENT_NAME}}Props {
  /**
   * {{PROP_DESCRIPTION}}
   */
  {{PROP_NAME}}: {{PROP_TYPE}};

  /**
   * Optional CSS class name to apply to the component
   */
  className?: string;

  /**
   * Optional children elements
   */
  children?: React.ReactNode;
}

/**
 * {{COMPONENT_NAME}} component
 *
 * {{COMPONENT_DESCRIPTION}}
 *
 * @example
 * ```tsx
 * <{{COMPONENT_NAME}} {{PROP_NAME}}="{{EXAMPLE_VALUE}}">
 *   Content here
 * </{{COMPONENT_NAME}}>
 * ```
 */
export const {{COMPONENT_NAME}}: React.FC<{{COMPONENT_NAME}}Props> = ({
  {{PROP_NAME}},
  className = '',
  children
}) => {
  return (
    <div className={`${styles.container} ${className}`}>
      {/* {{COMPONENT_IMPLEMENTATION}} */}
      <div className={styles.content}>
        {children}
      </div>
    </div>
  );
};

export default {{COMPONENT_NAME}};

