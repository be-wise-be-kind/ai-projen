// Purpose: {{COMPONENT_PURPOSE}} - React component with hooks
// Scope: {{COMPONENT_SCOPE}}
// Usage: Copy and replace {{PLACEHOLDERS}}

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styles from './{{COMPONENT_NAME}}.module.css';

/**
 * Props for the {{COMPONENT_NAME}} component
 */
interface {{COMPONENT_NAME}}Props {
  /**
   * {{PROP_DESCRIPTION}}
   */
  {{PROP_NAME}}: {{PROP_TYPE}};

  /**
   * Callback fired when {{EVENT_DESCRIPTION}}
   */
  {{EVENT_HANDLER_NAME}}?: ({{EVENT_PARAM}}: {{EVENT_PARAM_TYPE}}) => void;

  /**
   * Optional CSS class name to apply to the component
   */
  className?: string;

  /**
   * Optional children elements
   */
  children?: React.ReactNode;
}

/**
 * {{STATE_DESCRIPTION}}
 */
interface {{COMPONENT_NAME}}State {
  {{STATE_FIELD}}: {{STATE_TYPE}};
  isLoading: boolean;
  error: Error | null;
}

/**
 * {{COMPONENT_NAME}} component
 *
 * {{COMPONENT_DESCRIPTION}}
 *
 * Features:
 * - {{FEATURE_1}}
 * - {{FEATURE_2}}
 * - Error handling and loading states
 *
 * @example
 * ```tsx
 * <{{COMPONENT_NAME}}
 *   {{PROP_NAME}}="{{EXAMPLE_VALUE}}"
 *   {{EVENT_HANDLER_NAME}}={({{EVENT_PARAM}}) => console.log({{EVENT_PARAM}})}
 * />
 * ```
 */
export const {{COMPONENT_NAME}}: React.FC<{{COMPONENT_NAME}}Props> = ({
  {{PROP_NAME}},
  {{EVENT_HANDLER_NAME}},
  className = '',
  children
}) => {
  // State management
  const [state, setState] = useState<{{COMPONENT_NAME}}State>({
    {{STATE_FIELD}}: {{INITIAL_STATE_VALUE}},
    isLoading: false,
    error: null
  });

  // Memoized values
  const {{MEMOIZED_VALUE}} = useMemo(() => {
    // {{MEMOIZATION_LOGIC}}
    return {{COMPUTED_VALUE}};
  }, [{{DEPENDENCIES}}]);

  // Event handlers
  const handle{{ACTION}} = useCallback(({{HANDLER_PARAM}}: {{HANDLER_PARAM_TYPE}}) => {
    try {
      // {{HANDLER_LOGIC}}
      {{EVENT_HANDLER_NAME}}?.({{HANDLER_PARAM}});
    } catch (err) {
      setState(prev => ({
        ...prev,
        error: err instanceof Error ? err : new Error('Unknown error')
      }));
    }
  }, [{{EVENT_HANDLER_NAME}}]);

  // Effects
  useEffect(() => {
    let mounted = true;

    const fetch{{DATA}}Async = async () => {
      setState(prev => ({ ...prev, isLoading: true, error: null }));

      try {
        // {{ASYNC_LOGIC}}
        const result = {{FETCH_LOGIC}};

        if (mounted) {
          setState(prev => ({
            ...prev,
            {{STATE_FIELD}}: result,
            isLoading: false
          }));
        }
      } catch (err) {
        if (mounted) {
          setState(prev => ({
            ...prev,
            isLoading: false,
            error: err instanceof Error ? err : new Error('Unknown error')
          }));
        }
      }
    };

    fetch{{DATA}}Async();

    return () => {
      mounted = false;
    };
  }, [{{PROP_NAME}}]);

  // Loading state
  if (state.isLoading) {
    return (
      <div className={`${styles.container} ${styles.loading} ${className}`}>
        <div className={styles.spinner} />
        <p>Loading...</p>
      </div>
    );
  }

  // Error state
  if (state.error) {
    return (
      <div className={`${styles.container} ${styles.error} ${className}`}>
        <p className={styles.errorMessage}>
          Error: {state.error.message}
        </p>
        <button
          onClick={() => setState(prev => ({ ...prev, error: null }))}
          className={styles.retryButton}
        >
          Retry
        </button>
      </div>
    );
  }

  // Main render
  return (
    <div className={`${styles.container} ${className}`}>
      {/* {{COMPONENT_IMPLEMENTATION}} */}
      <div className={styles.content}>
        {children}
      </div>
    </div>
  );
};

export default {{COMPONENT_NAME}};

// Template Placeholders:
// {{COMPONENT_PURPOSE}} - Brief purpose (e.g., "Fetch and display user data")
// {{COMPONENT_SCOPE}} - Scope (e.g., "User profile section")
// {{COMPONENT_NAME}} - PascalCase component name (e.g., "UserProfile")
// {{COMPONENT_DESCRIPTION}} - Detailed description
// {{PROP_NAME}} - Main prop name (e.g., "userId")
// {{PROP_TYPE}} - TypeScript type (e.g., "string")
// {{PROP_DESCRIPTION}} - Prop description
// {{EVENT_HANDLER_NAME}} - Event handler name (e.g., "onUserSelect")
// {{EVENT_DESCRIPTION}} - What triggers the event (e.g., "user is selected")
// {{EVENT_PARAM}} - Event parameter name (e.g., "user")
// {{EVENT_PARAM_TYPE}} - Event parameter type (e.g., "User")
// {{STATE_DESCRIPTION}} - Description of component state
// {{STATE_FIELD}} - State field name (e.g., "data", "users")
// {{STATE_TYPE}} - State field type (e.g., "User[]")
// {{INITIAL_STATE_VALUE}} - Initial state value (e.g., "[]", "null")
// {{MEMOIZED_VALUE}} - Name of memoized value (e.g., "sortedUsers")
// {{MEMOIZATION_LOGIC}} - Logic for computing memoized value
// {{COMPUTED_VALUE}} - Result of memoization
// {{DEPENDENCIES}} - Dependency array for useMemo
// {{ACTION}} - Action name (e.g., "Click", "Submit")
// {{HANDLER_PARAM}} - Handler parameter name
// {{HANDLER_PARAM_TYPE}} - Handler parameter type
// {{HANDLER_LOGIC}} - Logic inside handler
// {{DATA}} - Data being fetched (e.g., "User", "Products")
// {{ASYNC_LOGIC}} - Async operation description
// {{FETCH_LOGIC}} - Actual fetch implementation
// {{FEATURE_1}} - First feature description
// {{FEATURE_2}} - Second feature description
// {{EXAMPLE_VALUE}} - Example prop value
// {{COMPONENT_IMPLEMENTATION}} - Main implementation

// Example usage:
// 1. Copy this template
// 2. Replace all {{PLACEHOLDERS}}
// 3. Add/remove hooks as needed
// 4. Implement async logic
// 5. Add CSS module
// 6. Test with: make dev-typescript
