/**
 * Purpose: Template for stateful React component - component with hooks for state and side effects
 *
 * Scope: Interactive UI components with state management, async operations, and side effects
 *
 * Overview: Generates a comprehensive React functional component with full state management
 *     capabilities using React hooks. Provides patterns for local state with useState, memoized
 *     computations with useMemo, event handlers with useCallback, and side effects with useEffect.
 *     Includes proper TypeScript interfaces for props and state, loading and error state handling,
 *     async operation patterns with cleanup, event handler implementations, and optimized
 *     re-rendering with memoization. The generated component demonstrates best practices for
 *     managing component lifecycle, handling async data fetching, preventing memory leaks with
 *     cleanup functions, and optimizing performance with dependency arrays. Includes conditional
 *     rendering for loading and error states with appropriate UI feedback. Suitable for building
 *     data-fetching components, form handlers, real-time data displays, and interactive features
 *     requiring state management.
 *
 * Dependencies: React 18+ with hooks, CSS Modules support in bundler
 *
 * Exports: Component as named export and default export, Props and State interfaces for TypeScript
 *
 * Placeholders:
 *     - {{COMPONENT_PURPOSE}}: Brief purpose (e.g., "Fetch and display user data")
 *     - {{COMPONENT_SCOPE}}: Usage scope (e.g., "User profile section")
 *     - {{COMPONENT_NAME}}: Component name in PascalCase (e.g., "UserProfile")
 *     - {{COMPONENT_DESCRIPTION}}: Detailed component description
 *     - {{PROP_NAME}}: Main prop field name (e.g., "userId")
 *     - {{PROP_TYPE}}: TypeScript type for prop (e.g., "string")
 *     - {{PROP_DESCRIPTION}}: Prop description
 *     - {{EVENT_HANDLER_NAME}}: Event handler prop name (e.g., "onUserSelect")
 *     - {{EVENT_DESCRIPTION}}: Event trigger description (e.g., "user is selected")
 *     - {{EVENT_PARAM}}: Event parameter name (e.g., "user")
 *     - {{EVENT_PARAM_TYPE}}: Event parameter type (e.g., "User")
 *     - {{STATE_DESCRIPTION}}: Component state description
 *     - {{STATE_FIELD}}: State field name (e.g., "data", "users")
 *     - {{STATE_TYPE}}: State field TypeScript type (e.g., "User[]")
 *     - {{INITIAL_STATE_VALUE}}: Initial state value (e.g., "[]", "null")
 *     - {{MEMOIZED_VALUE}}: Memoized value name (e.g., "sortedUsers")
 *     - {{MEMOIZATION_LOGIC}}: Memoization logic description
 *     - {{COMPUTED_VALUE}}: Result of memoization
 *     - {{DEPENDENCIES}}: Dependency array for useMemo
 *     - {{ACTION}}: Action name (e.g., "Click", "Submit")
 *     - {{HANDLER_PARAM}}: Handler parameter name
 *     - {{HANDLER_PARAM_TYPE}}: Handler parameter type
 *     - {{HANDLER_LOGIC}}: Handler implementation logic
 *     - {{DATA}}: Data being fetched (e.g., "User", "Products")
 *     - {{ASYNC_LOGIC}}: Async operation description
 *     - {{FETCH_LOGIC}}: Fetch implementation
 *     - {{FEATURE_1}}: First feature description
 *     - {{FEATURE_2}}: Second feature description
 *     - {{EXAMPLE_VALUE}}: Example prop value
 *     - {{COMPONENT_IMPLEMENTATION}}: Main implementation description
 *
 * Usage: Copy template to component directory, replace all {{PLACEHOLDERS}}, customize hooks and state logic, create matching CSS Module file
 *
 * Related: react-component.tsx.template for simpler components, react-hook.ts.template for extracting custom hooks, component.module.css.template for styling
 *
 * Implementation: Functional component with hooks, TypeScript for type safety, proper cleanup for async operations, memoization for performance, conditional rendering for states
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styles from './{{COMPONENT_NAME}}.module.css';

/**
 * Props for the {{COMPONENT_NAME}} component
 */
interface {{COMPONENT_NAME}}Props {
  /**
   * {{PROP_DESCRIPTION}}
   */
  {{PROP_NAME}}: {{PROP_TYPE}};

  /**
   * Callback fired when {{EVENT_DESCRIPTION}}
   */
  {{EVENT_HANDLER_NAME}}?: ({{EVENT_PARAM}}: {{EVENT_PARAM_TYPE}}) => void;

  /**
   * Optional CSS class name to apply to the component
   */
  className?: string;

  /**
   * Optional children elements
   */
  children?: React.ReactNode;
}

/**
 * {{STATE_DESCRIPTION}}
 */
interface {{COMPONENT_NAME}}State {
  {{STATE_FIELD}}: {{STATE_TYPE}};
  isLoading: boolean;
  error: Error | null;
}

/**
 * {{COMPONENT_NAME}} component
 *
 * {{COMPONENT_DESCRIPTION}}
 *
 * Features:
 * - {{FEATURE_1}}
 * - {{FEATURE_2}}
 * - Error handling and loading states
 *
 * @example
 * ```tsx
 * <{{COMPONENT_NAME}}
 *   {{PROP_NAME}}="{{EXAMPLE_VALUE}}"
 *   {{EVENT_HANDLER_NAME}}={({{EVENT_PARAM}}) => console.log({{EVENT_PARAM}})}
 * />
 * ```
 */
export const {{COMPONENT_NAME}}: React.FC<{{COMPONENT_NAME}}Props> = ({
  {{PROP_NAME}},
  {{EVENT_HANDLER_NAME}},
  className = '',
  children
}) => {
  // State management
  const [state, setState] = useState<{{COMPONENT_NAME}}State>({
    {{STATE_FIELD}}: {{INITIAL_STATE_VALUE}},
    isLoading: false,
    error: null
  });

  // Memoized values
  const {{MEMOIZED_VALUE}} = useMemo(() => {
    // {{MEMOIZATION_LOGIC}}
    return {{COMPUTED_VALUE}};
  }, [{{DEPENDENCIES}}]);

  // Event handlers
  const handle{{ACTION}} = useCallback(({{HANDLER_PARAM}}: {{HANDLER_PARAM_TYPE}}) => {
    try {
      // {{HANDLER_LOGIC}}
      {{EVENT_HANDLER_NAME}}?.({{HANDLER_PARAM}});
    } catch (err) {
      setState(prev => ({
        ...prev,
        error: err instanceof Error ? err : new Error('Unknown error')
      }));
    }
  }, [{{EVENT_HANDLER_NAME}}]);

  // Effects
  useEffect(() => {
    let mounted = true;

    const fetch{{DATA}}Async = async () => {
      setState(prev => ({ ...prev, isLoading: true, error: null }));

      try {
        // {{ASYNC_LOGIC}}
        const result = {{FETCH_LOGIC}};

        if (mounted) {
          setState(prev => ({
            ...prev,
            {{STATE_FIELD}}: result,
            isLoading: false
          }));
        }
      } catch (err) {
        if (mounted) {
          setState(prev => ({
            ...prev,
            isLoading: false,
            error: err instanceof Error ? err : new Error('Unknown error')
          }));
        }
      }
    };

    fetch{{DATA}}Async();

    return () => {
      mounted = false;
    };
  }, [{{PROP_NAME}}]);

  // Loading state
  if (state.isLoading) {
    return (
      <div className={`${styles.container} ${styles.loading} ${className}`}>
        <div className={styles.spinner} />
        <p>Loading...</p>
      </div>
    );
  }

  // Error state
  if (state.error) {
    return (
      <div className={`${styles.container} ${styles.error} ${className}`}>
        <p className={styles.errorMessage}>
          Error: {state.error.message}
        </p>
        <button
          onClick={() => setState(prev => ({ ...prev, error: null }))}
          className={styles.retryButton}
        >
          Retry
        </button>
      </div>
    );
  }

  // Main render
  return (
    <div className={`${styles.container} ${className}`}>
      {/* {{COMPONENT_IMPLEMENTATION}} */}
      <div className={styles.content}>
        {children}
      </div>
    </div>
  );
};

export default {{COMPONENT_NAME}};

