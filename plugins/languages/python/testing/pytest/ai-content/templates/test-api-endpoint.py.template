"""
Test template for FastAPI endpoint testing.

Usage: Copy this template and modify for your specific endpoint tests.
"""
import pytest
from fastapi.testclient import TestClient
from httpx import AsyncClient
from app.main import app

# Synchronous client for simple tests
client = TestClient(app)


class TestUserEndpoints:
    """Test suite for user-related endpoints."""

    def test_get_users_list(self):
        """Test GET /users/ returns list of users."""
        response = client.get("/users/")

        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)

    def test_get_user_by_id_success(self):
        """Test GET /users/{id} returns user when found."""
        response = client.get("/users/1")

        assert response.status_code == 200
        data = response.json()
        assert "id" in data
        assert data["id"] == 1

    def test_get_user_by_id_not_found(self):
        """Test GET /users/{id} returns 404 when user doesn't exist."""
        response = client.get("/users/99999")

        assert response.status_code == 404
        assert response.json() == {"detail": "User not found"}

    def test_create_user_success(self):
        """Test POST /users/ creates new user."""
        payload = {
            "email": "newuser@example.com",
            "name": "New User",
            "password": "secure_password_123"
        }

        response = client.post("/users/", json=payload)

        assert response.status_code == 201
        data = response.json()
        assert data["email"] == payload["email"]
        assert data["name"] == payload["name"]
        assert "id" in data
        assert "password" not in data  # Password should not be returned

    def test_create_user_validation_error(self):
        """Test POST /users/ returns 422 for invalid data."""
        payload = {
            "email": "invalid-email",  # Invalid email format
            # Missing required fields
        }

        response = client.post("/users/", json=payload)

        assert response.status_code == 422
        errors = response.json()["detail"]
        assert any(error["loc"] == ["body", "email"] for error in errors)

    def test_update_user_success(self):
        """Test PUT /users/{id} updates user."""
        payload = {"name": "Updated Name"}

        response = client.put("/users/1", json=payload)

        assert response.status_code == 200
        data = response.json()
        assert data["name"] == "Updated Name"

    def test_delete_user_success(self):
        """Test DELETE /users/{id} removes user."""
        response = client.delete("/users/1")

        assert response.status_code == 204

        # Verify user is deleted
        get_response = client.get("/users/1")
        assert get_response.status_code == 404


class TestAuthenticatedEndpoints:
    """Test suite for endpoints requiring authentication."""

    def test_protected_endpoint_without_auth(self):
        """Test protected endpoint returns 401 without authentication."""
        response = client.get("/protected/resource")

        assert response.status_code == 401
        assert "detail" in response.json()

    def test_protected_endpoint_with_invalid_token(self):
        """Test protected endpoint returns 401 with invalid token."""
        headers = {"Authorization": "Bearer invalid-token"}
        response = client.get("/protected/resource", headers=headers)

        assert response.status_code == 401

    def test_protected_endpoint_with_valid_token(self):
        """Test protected endpoint returns 200 with valid token."""
        # First, get a valid token
        login_response = client.post("/auth/login", json={
            "email": "user@example.com",
            "password": "password123"
        })
        token = login_response.json()["access_token"]

        # Use token to access protected endpoint
        headers = {"Authorization": f"Bearer {token}"}
        response = client.get("/protected/resource", headers=headers)

        assert response.status_code == 200


class TestAsyncEndpoints:
    """Test suite for async endpoints."""

    @pytest.mark.asyncio
    async def test_async_endpoint(self):
        """Test async endpoint with AsyncClient."""
        async with AsyncClient(app=app, base_url="http://test") as ac:
            response = await ac.get("/async/users/")

            assert response.status_code == 200
            data = response.json()
            assert isinstance(data, list)

    @pytest.mark.asyncio
    async def test_async_endpoint_with_query_params(self):
        """Test async endpoint with query parameters."""
        async with AsyncClient(app=app, base_url="http://test") as ac:
            response = await ac.get("/async/users/", params={"limit": 10, "offset": 0})

            assert response.status_code == 200
            data = response.json()
            assert len(data) <= 10


# Dependency override example
def test_with_mocked_dependency(monkeypatch):
    """Test endpoint with mocked dependency."""
    from app.dependencies import get_db

    def mock_get_db():
        return MockDatabase()

    # Override dependency
    app.dependency_overrides[get_db] = mock_get_db

    try:
        response = client.get("/users/")
        assert response.status_code == 200
    finally:
        # Clean up override
        app.dependency_overrides.clear()
