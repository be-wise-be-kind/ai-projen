"""
Purpose: Template for Pydantic schema models with validation for API request/response handling

Scope: API data validation, request/response serialization, data transformation

Overview: Generates Python module containing Pydantic schema classes for comprehensive API
    data validation and serialization. Provides complete schema hierarchy including base schema
    with common fields, creation schema for POST requests, update schema for PATCH/PUT with
    optional fields, response schema with database-generated fields, and paginated list schema.
    Each schema includes proper type annotations, field validation, example data for API docs,
    and configuration for ORM integration. Follows Pydantic V2 patterns with ConfigDict.

Dependencies: Pydantic V2 (data validation), datetime for timestamps, typing for type hints

Exports: Five Pydantic model classes - Base, Create, Update, Response, and List schemas

Placeholders:
    - {{MODEL_NAME}}: Name of the data model (e.g., "User", "Product", "Order")

Usage: Copy template to target location, replace all {{PLACEHOLDERS}}, customize implementation

Related: Pydantic V2 documentation, FastAPI validation patterns, OpenAPI schema generation

Implementation: Uses Pydantic BaseModel with ConfigDict, Field descriptions for API docs,
    schema inheritance pattern, from_attributes for ORM compatibility, json_schema_extra examples
"""

from pydantic import BaseModel, ConfigDict, Field
from datetime import datetime
from typing import Optional


class {{MODEL_NAME}}Base(BaseModel):
    """Base {{MODEL_NAME}} schema with common fields."""

    # TODO: Add your base fields here
    # Example:
    # name: str = Field(..., description="{{MODEL_NAME}} name")
    # description: Optional[str] = Field(None, description="{{MODEL_NAME}} description")
    pass


class {{MODEL_NAME}}Create({{MODEL_NAME}}Base):
    """Schema for creating a new {{MODEL_NAME}}.

    All required fields must be provided.
    """

    # Add creation-specific fields if needed
    pass

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                # TODO: Add example data
                # "name": "Example",
                # "description": "An example {{MODEL_NAME}}"
            }
        }
    )


class {{MODEL_NAME}}Update(BaseModel):
    """Schema for updating {{MODEL_NAME}}.

    All fields are optional for partial updates.
    """

    # TODO: Add update fields (all optional)
    # name: Optional[str] = None
    # description: Optional[str] = None
    pass


class {{MODEL_NAME}}Response({{MODEL_NAME}}Base):
    """Schema for {{MODEL_NAME}} responses from API.

    Includes all fields including generated ones.
    """

    id: int
    created_at: datetime
    updated_at: datetime

    model_config = ConfigDict(from_attributes=True)


class {{MODEL_NAME}}List(BaseModel):
    """Paginated list of {{MODEL_NAME}}s."""

    items: list[{{MODEL_NAME}}Response]
    total: int
    page: int
    page_size: int
