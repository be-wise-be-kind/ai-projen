# Purpose: Comprehensive Python project configuration template with all production-grade tooling
# Scope: Project metadata, dependencies, and tool configurations for linting, type checking, security, testing, and complexity analysis
# Overview: Complete pyproject.toml template with Poetry package management and comprehensive
#     development tooling including: mypy (type checking), bandit/safety/pip-audit (security),
#     pylint/flake8+plugins (linting), radon/xenon (complexity), ruff (fast linting/formatting),
#     and pytest (testing). Based on durable-code-test reference implementation.
# Dependencies: Python 3.11+, Poetry (recommended) or pip
# Exports: Project configuration, dependency management, tool configurations
# Related: Python development standards, production-ready tooling
# Implementation: Poetry-based pyproject.toml with comprehensive tool configuration sections

[tool.poetry]
name = "{{PROJECT_NAME}}"
version = "0.1.0"
description = "{{PROJECT_DESCRIPTION}}"
authors = ["{{AUTHOR_NAME}} <{{AUTHOR_EMAIL}}>"]
readme = "README.md"
packages = [{include = "{{PACKAGE_NAME}}"}]

[tool.poetry.dependencies]
python = "^3.11"
# Add your runtime dependencies here
# Example: fastapi = "^0.116.1"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.4.2"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"

# Linting and Formatting
ruff = "^0.13.0"
pylint = "^3.0.0"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^24.0.0"
flake8-comprehensions = "^3.14.0"
flake8-simplify = "^0.21.0"

# Type Checking
mypy = "^1.18.1"

# Security Scanning
bandit = "^1.7.5"
safety = "^3.0.0"
pip-audit = "^2.9.0"

# Complexity Analysis
radon = "^6.0.1"
xenon = "^0.9.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

################################################################################
# Tool Configurations
################################################################################

# Ruff - Fast linting and formatting (primary tool)
[tool.ruff]
target-version = "py311"
line-length = 120
cache-dir = "/tmp/.ruff_cache"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "S",   # flake8-bandit
    "C90", # mccabe complexity
]
ignore = ["E501", "B008", "C901", "S101"]

[tool.ruff.lint.mccabe]
max-complexity = 5  # Enforces Radon complexity A

# MyPy - Static type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
exclude = [
    'tests/.*',
    'test/.*',
]

# Pylint - Comprehensive code quality linting
[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "C0111", # missing-docstring
    "C0103", # invalid-name
    "C0301", # line-too-long (handled by ruff formatter)
    "R0903", # too-few-public-methods
    "R0913", # too-many-arguments
    "R0902", # too-many-instance-attributes
    "W0212", # protected-access
    "E0213", # no-self-argument (false positive for Pydantic validators)
    "W0613", # unused-argument (false positive for FastAPI request parameters)
    "C0415", # import-outside-toplevel (sometimes required for FastAPI setup)
]

[tool.pylint.design]
# Complexity is handled by Radon and Ruff/mccabe
max-args = 5
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50

# Bandit - Security vulnerability scanning
[tool.bandit]
exclude_dirs = ["/tests/", "/test/"]
skips = ["B101"]  # Skip assert_used test

# Pytest - Testing framework
[tool.pytest.ini_options]
testpaths = ["tests", "test"]
python_files = ["test_*.py", "*_test.py"]
asyncio_mode = "auto"
addopts = "--tb=short"
cache_dir = "/tmp/.pytest_cache"
markers = [
    "integration: marks tests as integration tests (may require external services)",
    "slow: marks tests as slow running tests"
]

# Coverage - Test coverage reporting
[tool.coverage.run]
source = ["{{PACKAGE_NAME}}"]
omit = ["*/tests/*", "*/test/*", "*/__init__.py"]
data_file = "/tmp/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Radon - Complexity analysis
[tool.radon]
cc_min = "A"  # Enforce complexity A (1-5)
mi_min = "A"  # Enforce maintainability index A (20-100)
exclude = "tests/*,test/*"
