<!--
Purpose: Template for generating the primary AI agent entry point file (agents.md)

Scope: Used by ai-folder plugin to create agents.md in repository root during plugin installation

Overview: Generates the main agents.md file that serves as the primary entry point for AI agents
    working on a project. The generated file provides project overview, navigation guidance,
    development guidelines, build commands, and best practices. This template ensures consistent
    AI agent onboarding across all ai-projen managed repositories.

Placeholders:
  {{PROJECT_NAME}}: Name of the project
    - Type: string
    - Example: "my-awesome-app"
    - Required: yes

  {{PROJECT_PURPOSE}}: Brief description of what the project does
    - Type: string (1-2 sentences)
    - Example: "E-commerce platform with React frontend and Python backend"
    - Required: yes

  {{PROJECT_TYPE}}: Type/category of the project
    - Type: string
    - Example: "full-stack", "python", "typescript", "microservices"
    - Required: yes

  {{PROJECT_STATUS}}: Current development status
    - Type: string
    - Example: "in-development", "stable", "experimental"
    - Required: yes

  {{SOURCE_DIR}}: Directory containing source code
    - Type: string (path)
    - Example: "src/", "app/", "lib/"
    - Required: yes

  {{TEST_DIR}}: Directory containing tests
    - Type: string (path)
    - Example: "tests/", "test/", "specs/"
    - Required: yes

  {{DOCS_DIR}}: Directory containing documentation
    - Type: string (path)
    - Example: "docs/", "documentation/"
    - Required: yes

  {{LOG_DIR}}: Directory for log files (optional)
    - Type: string (path)
    - Example: "logs/", "var/log/"
    - Required: no
    - Default: Leave as "{{LOG_DIR}}" placeholder for user to fill in

Usage:
  1. Copy template to repository root:
     cp plugins/foundation/ai-folder/ai-content/templates/agents.md.template agents.md

  2. Replace all placeholders with project-specific values

  3. Remove this template header (HTML comment block)

  4. Verify markdown syntax:
     markdownlint agents.md

Related: FILE_HEADER_STANDARDS.md, ai-folder plugin documentation, .ai/index.yaml
-->

# AI Agent Guide for {{PROJECT_NAME}}

**Purpose**: Primary entry point for AI agents working on this project

**Quick Start**: Read `.ai/docs/PROJECT_CONTEXT.md` for full context, then check `.ai/index.yaml` for navigation.

---

## Project Overview

{{PROJECT_PURPOSE}}

**Type**: {{PROJECT_TYPE}}
**Status**: {{PROJECT_STATUS}}

## Navigation

### Critical Documents
- **Project Context**: `.ai/docs/PROJECT_CONTEXT.md` - Architecture and philosophy
- **Index**: `.ai/index.yaml` - Repository structure and navigation
- **Layout**: `.ai/layout.yaml` - Directory organization

### How-To Guides
See `.ai/howto/` for step-by-step guides on common tasks.

### Templates
See `.ai/templates/` for reusable file templates and boilerplate.

## Development Guidelines

### Code Style
<!-- Add language-specific style guidelines here -->
<!-- Example: PEP 8 for Python, ESLint rules for TypeScript -->

### File Organization
See `.ai/layout.yaml` for the canonical directory structure.

**Key Directories**:
- Source code: `{{SOURCE_DIR}}`
- Tests: `{{TEST_DIR}}`
- Documentation: `{{DOCS_DIR}}`

### Documentation Standards
<!-- Add documentation requirements here -->
<!-- Example: File headers, README sections, inline comments -->

## Build and Test Commands

### Development
```bash
# Add development commands here
# Example:
# npm run dev
# make dev
```

### Testing
```bash
# Add test commands here
# Example:
# npm test
# make test
# pytest
```

### Linting
```bash
# Add linting commands here
# Example:
# npm run lint
# make lint
```

### Building
```bash
# Add build commands here
# Example:
# npm run build
# make build
```

## Git Workflow

### Commit Messages
Follow conventional commits format:
```
type(scope): Brief description

Detailed description if needed.
```

Types: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`

### Branch Strategy
<!-- Add branch strategy here -->
<!-- Example: main, develop, feature/*, bugfix/* -->

### Before Committing
- [ ] All tests pass
- [ ] Code is linted
- [ ] Documentation updated
- [ ] No secrets committed

## Security Considerations

- Never commit secrets or credentials
- Secrets should be in `.env` (gitignored)
- Validate user input
- Follow security best practices for {{PROJECT_TYPE}}

## Common Tasks

### Adding a New Feature
1. Check `.ai/features/` for existing feature documentation
2. Create feature branch
3. Implement feature following code style guidelines
4. Add tests
5. Update documentation
6. Submit PR

### Debugging
1. Check logs in `{{LOG_DIR}}`
2. Run tests with verbose output
3. Use debugger (see `.ai/howto/debugging.md` if available)

### Deployment
<!-- Add deployment instructions here -->
<!-- Example: CI/CD pipeline, manual deployment steps -->

## Resources

### Documentation
<!-- Add links to relevant documentation -->
<!-- Example: API docs, framework docs, design docs -->

### External Dependencies
<!-- List key dependencies and their documentation -->
<!-- IMPORTANT: Never list dependencies inline - they change over time -->
<!-- For Python: Reference pyproject.toml (Poetry) or requirements.txt -->
<!-- For Node.js: Reference package.json -->
<!-- For Rust: Reference Cargo.toml -->
<!-- Example: "See pyproject.toml for Python dependencies managed by Poetry" -->

## Getting Help

### When Stuck
1. Check `.ai/docs/` for context and architecture
2. Review `.ai/howto/` for guides
3. Check existing code for patterns
4. Review git history for similar changes

### Contact
<!-- Add contact information or issue reporting process -->

---

**Note**: This file is generated by ai-projen's ai-folder plugin. Customize sections based on your project's specific needs.

<!--
PLUGIN EXTENSION MARKERS
Plugins can add content between these markers:

### LANGUAGE_SPECIFIC_GUIDELINES
Language plugins add their specific conventions here.
### END_LANGUAGE_SPECIFIC_GUIDELINES

### INFRASTRUCTURE_COMMANDS
Infrastructure plugins add deployment/ops commands here.
### END_INFRASTRUCTURE_COMMANDS

### STANDARDS_CHECKLIST
Standards plugins add compliance checklists here.
### END_STANDARDS_CHECKLIST
-->
