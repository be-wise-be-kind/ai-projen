# AI Agent Guide for {{PROJECT_NAME}}

**Purpose**: Primary entry point for AI agents working on this project

**Quick Start**: Read `.ai/docs/PROJECT_CONTEXT.md` for full context, then check `.ai/index.yaml` for navigation.

---

## Project Overview

{{PROJECT_PURPOSE}}

**Type**: {{PROJECT_TYPE}}
**Status**: {{PROJECT_STATUS}}

## Navigation

### Critical Documents
- **Project Context**: `.ai/docs/PROJECT_CONTEXT.md` - Architecture and philosophy
- **Index**: `.ai/index.yaml` - Repository structure and navigation
- **Layout**: `.ai/layout.yaml` - Directory organization

### How-To Guides
See `.ai/howto/` for step-by-step guides on common tasks.

### Templates
See `.ai/templates/` for reusable file templates and boilerplate.

## Development Guidelines

### Code Style
<!-- Add language-specific style guidelines here -->
<!-- Example: PEP 8 for Python, ESLint rules for TypeScript -->

### File Organization
See `.ai/layout.yaml` for the canonical directory structure.

**Key Directories**:
- Source code: `{{SOURCE_DIR}}`
- Tests: `{{TEST_DIR}}`
- Documentation: `{{DOCS_DIR}}`

### Documentation Standards
<!-- Add documentation requirements here -->
<!-- Example: File headers, README sections, inline comments -->

## Build and Test Commands

### Development
```bash
# Add development commands here
# Example:
# npm run dev
# make dev
```

### Testing
```bash
# Add test commands here
# Example:
# npm test
# make test
# pytest
```

### Linting
```bash
# Add linting commands here
# Example:
# npm run lint
# make lint
```

### Building
```bash
# Add build commands here
# Example:
# npm run build
# make build
```

## Git Workflow

### Commit Messages
Follow conventional commits format:
```
type(scope): Brief description

Detailed description if needed.
```

Types: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`

### Branch Strategy
<!-- Add branch strategy here -->
<!-- Example: main, develop, feature/*, bugfix/* -->

### Before Committing
- [ ] All tests pass
- [ ] Code is linted
- [ ] Documentation updated
- [ ] No secrets committed

## Security Considerations

- Never commit secrets or credentials
- Secrets should be in `.env` (gitignored)
- Validate user input
- Follow security best practices for {{PROJECT_TYPE}}

## Common Tasks

### Adding a New Feature
1. Check `.ai/features/` for existing feature documentation
2. Create feature branch
3. Implement feature following code style guidelines
4. Add tests
5. Update documentation
6. Submit PR

### Debugging
1. Check logs in `{{LOG_DIR}}`
2. Run tests with verbose output
3. Use debugger (see `.ai/howto/debugging.md` if available)

### Deployment
<!-- Add deployment instructions here -->
<!-- Example: CI/CD pipeline, manual deployment steps -->

## Resources

### Documentation
<!-- Add links to relevant documentation -->
<!-- Example: API docs, framework docs, design docs -->

### External Dependencies
<!-- List key dependencies and their documentation -->

## Getting Help

### When Stuck
1. Check `.ai/docs/` for context and architecture
2. Review `.ai/howto/` for guides
3. Check existing code for patterns
4. Review git history for similar changes

### Contact
<!-- Add contact information or issue reporting process -->

---

**Note**: This file is generated by ai-projen's ai-folder plugin. Customize sections based on your project's specific needs.

<!--
PLUGIN EXTENSION MARKERS
Plugins can add content between these markers:

### LANGUAGE_SPECIFIC_GUIDELINES
Language plugins add their specific conventions here.
### END_LANGUAGE_SPECIFIC_GUIDELINES

### INFRASTRUCTURE_COMMANDS
Infrastructure plugins add deployment/ops commands here.
### END_INFRASTRUCTURE_COMMANDS

### STANDARDS_CHECKLIST
Standards plugins add compliance checklists here.
### END_STANDARDS_CHECKLIST
-->
