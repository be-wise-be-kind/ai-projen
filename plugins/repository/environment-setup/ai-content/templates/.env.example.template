# Purpose: Environment variable template with placeholder values for team reference
# Scope: Complete list of environment variables required by the application
# Overview: Template file showing all environment variables needed to run this application. Contains
#     placeholder values, descriptions, and examples for each variable. Team members copy this to .env
#     and fill in real values. Committed to version control (unlike .env) so everyone knows what
#     variables are required. Organized by category (application, database, external services, etc.)
#     with clear comments explaining purpose and format of each variable.
# Placeholders:
#     - {{PROJECT_NAME}}: Project name (string, required, example: "my-awesome-app")
#     - {{SERVICE_NAME}}: External service name (string, optional, example: "notion", "slack", "aws")
# Usage:
#     1. Copy to project root: cp .env.example.template .env.example
#     2. Customize placeholder values for your project
#     3. Replace {{PROJECT_NAME}} with your actual project name
#     4. Add/remove sections based on services you use
#     5. Commit .env.example to version control
#     6. Team members copy .env.example to .env and fill in real values
#     7. Remove this header after copying
# Related: .env, .envrc, environment-variables-best-practices.md
# Implementation: Comprehensive template covering common services and patterns

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Application Environment
# Options: development, staging, production
NODE_ENV=development
PYTHON_ENV=development

# Application Name
APP_NAME={{PROJECT_NAME}}

# Application Port
# The port your application listens on
PORT=3000
API_PORT=8000

# Application URL
# Full URL where your application is hosted
APP_URL=http://localhost:3000
API_URL=http://localhost:8000

# Debug Mode
# Enable detailed error messages and logging
DEBUG=true

# Log Level
# Options: debug, info, warn, error
LOG_LEVEL=info

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://user:password@localhost:5432/{{PROJECT_NAME}}_dev
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=user
POSTGRES_PASSWORD=password
POSTGRES_DB={{PROJECT_NAME}}_dev

# MySQL (Alternative)
# Format: mysql://username:password@host:port/database
# MYSQL_URL=mysql://user:password@localhost:3306/{{PROJECT_NAME}}_dev

# MongoDB (Alternative)
# Format: mongodb://username:password@host:port/database
# MONGO_URL=mongodb://user:password@localhost:27017/{{PROJECT_NAME}}_dev

# Redis
# Format: redis://[:password@]host:port/database
REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# Secret Keys
# Generate with: openssl rand -base64 32
SECRET_KEY=your_secret_key_here_min_32_characters
JWT_SECRET=your_jwt_secret_here_min_32_characters
SESSION_SECRET=your_session_secret_here_min_32_characters

# Token Expiration
JWT_EXPIRES_IN=7d
SESSION_MAX_AGE=604800000

# Password Hashing
# Bcrypt rounds (higher = more secure but slower, recommended: 10-12)
BCRYPT_ROUNDS=10

# CORS Origins
# Comma-separated list of allowed origins
CORS_ORIGINS=http://localhost:3000,http://localhost:8000

# =============================================================================
# EXTERNAL API SERVICES
# =============================================================================

# AWS Credentials
# Get from: https://console.aws.amazon.com/iam/home#/security_credentials
AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_REGION=us-east-1
AWS_S3_BUCKET={{PROJECT_NAME}}-uploads

# OpenAI API
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# Anthropic Claude API
# Get from: https://console.anthropic.com/
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here

# Notion API
# Get from: https://www.notion.so/my-integrations
NOTION_API_KEY=secret_your_notion_api_key_here
NOTION_DATABASE_ID=your_notion_database_id_here

# Slack Integration
# Get from: https://api.slack.com/apps
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXX
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token-here
SLACK_SIGNING_SECRET=your_slack_signing_secret_here
SLACK_CHANNEL=#general

# SendGrid Email
# Get from: https://app.sendgrid.com/settings/api_keys
SENDGRID_API_KEY=SG.your-sendgrid-api-key-here
SENDGRID_FROM_EMAIL=noreply@{{PROJECT_NAME}}.com
SENDGRID_FROM_NAME={{PROJECT_NAME}}

# Stripe Payments
# Get from: https://dashboard.stripe.com/apikeys
STRIPE_PUBLIC_KEY=pk_test_your_stripe_public_key_here
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret_here

# GitHub API
# Get from: https://github.com/settings/tokens
GITHUB_TOKEN=ghp_your_github_personal_access_token_here
GITHUB_CLIENT_ID=your_github_oauth_client_id
GITHUB_CLIENT_SECRET=your_github_oauth_client_secret

# Google OAuth
# Get from: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# =============================================================================
# CLOUD SERVICES
# =============================================================================

# AWS Additional Services
S3_BUCKET_NAME={{PROJECT_NAME}}-assets
CLOUDFRONT_DISTRIBUTION_ID=E1234EXAMPLE
SQS_QUEUE_URL=https://sqs.us-east-1.amazonaws.com/123456789012/{{PROJECT_NAME}}-queue
SNS_TOPIC_ARN=arn:aws:sns:us-east-1:123456789012:{{PROJECT_NAME}}-topic

# Google Cloud Platform
GCP_PROJECT_ID={{PROJECT_NAME}}-123456
GCP_SERVICE_ACCOUNT_KEY=path/to/service-account-key.json
GCS_BUCKET_NAME={{PROJECT_NAME}}-storage

# Azure
AZURE_STORAGE_ACCOUNT=youraccountname
AZURE_STORAGE_KEY=your_azure_storage_key_here
AZURE_CONTAINER_NAME={{PROJECT_NAME}}-blobs

# =============================================================================
# MONITORING & ANALYTICS
# =============================================================================

# Sentry Error Tracking
# Get from: https://sentry.io/settings/your-org/projects/your-project/keys/
SENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0

# Google Analytics
GA_TRACKING_ID=UA-000000000-0
GA_MEASUREMENT_ID=G-XXXXXXXXXX

# Datadog Monitoring
DATADOG_API_KEY=your_datadog_api_key_here
DATADOG_APP_KEY=your_datadog_app_key_here

# LogDNA/LogTail
LOGDNA_INGESTION_KEY=your_logdna_ingestion_key_here

# =============================================================================
# DEVELOPMENT TOOLS
# =============================================================================

# Chroma Vector Database (Local Development)
CHROMA_DB_PATH=./data/chroma_db
CHROMA_COLLECTION_NAME={{PROJECT_NAME}}_vectors

# Feature Flags
ENABLE_FEATURE_X=false
ENABLE_BETA_UI=false
ENABLE_DEBUG_TOOLBAR=true

# Testing
TEST_DATABASE_URL=postgresql://user:password@localhost:5432/{{PROJECT_NAME}}_test
TEST_REDIS_URL=redis://localhost:6379/1

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Docker Compose Settings
COMPOSE_PROJECT_NAME={{PROJECT_NAME}}
DOCKER_BUILDKIT=1

# Container Ports
FRONTEND_PORT=3000
BACKEND_PORT=8000
DATABASE_PORT=5432
REDIS_PORT=6379

# =============================================================================
# CI/CD CONFIGURATION
# =============================================================================

# GitHub Actions
GITHUB_ACTIONS=false

# Deployment Target
DEPLOY_TARGET=development

# Build Configuration
BUILD_ENV=development
SOURCE_MAP=true

# =============================================================================
# CUSTOM {{PROJECT_NAME}} CONFIGURATION
# =============================================================================

# Add your project-specific environment variables below
# Use descriptive names and add comments explaining purpose

# Example:
# {{SERVICE_NAME}}_API_KEY=your_api_key_here
# {{SERVICE_NAME}}_WEBHOOK_URL=https://example.com/webhook
# {{SERVICE_NAME}}_ENABLED=true

# =============================================================================
# NOTES
# =============================================================================
#
# 1. Copy this file to .env: cp .env.example .env
# 2. Fill in real values for your environment
# 3. NEVER commit .env to version control
# 4. Keep .env.example up to date when adding variables
# 5. Use descriptive names: SERVICE_SPECIFIC_VARIABLE
# 6. Add comments explaining non-obvious variables
# 7. Group related variables together
# 8. Use SCREAMING_SNAKE_CASE for all variable names
#
# =============================================================================
