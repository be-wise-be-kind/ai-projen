// Purpose: {{SLICE_PURPOSE}} - Redux Toolkit slice
// Scope: {{SLICE_SCOPE}}
// Usage: Copy and replace {{PLACEHOLDERS}}

import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';

/**
 * {{SLICE_NAME}} state interface
 */
interface {{SLICE_NAME}}State {
  {{STATE_FIELD}}: {{STATE_TYPE}};
  isLoading: boolean;
  error: string | null;
}

/**
 * Initial state for {{SLICE_NAME}}
 */
const initialState: {{SLICE_NAME}}State = {
  {{STATE_FIELD}}: {{INITIAL_VALUE}},
  isLoading: false,
  error: null,
};

/**
 * Async thunk for {{ASYNC_ACTION_DESCRIPTION}}
 */
export const {{ASYNC_ACTION_NAME}} = createAsyncThunk(
  '{{SLICE_NAME_LOWER}}/{{ASYNC_ACTION_NAME}}',
  async ({{ASYNC_PARAM}}: {{ASYNC_PARAM_TYPE}}, { rejectWithValue }) => {
    try {
      // {{ASYNC_LOGIC}}
      const response = await {{API_CALL}};
      return response;
    } catch (error) {
      return rejectWithValue(
        error instanceof Error ? error.message : 'Unknown error'
      );
    }
  }
);

/**
 * {{SLICE_NAME}} slice
 */
const {{SLICE_NAME_LOWER}}Slice = createSlice({
  name: '{{SLICE_NAME_LOWER}}',
  initialState,
  reducers: {
    {{ACTION_NAME}}: (state, action: PayloadAction<{{ACTION_PAYLOAD_TYPE}}>) => {
      // {{ACTION_LOGIC}}
      state.{{STATE_FIELD}} = action.payload;
    },
    reset{{SLICE_NAME}}: (state) => {
      Object.assign(state, initialState);
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Async action - pending
      .addCase({{ASYNC_ACTION_NAME}}.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      // Async action - fulfilled
      .addCase({{ASYNC_ACTION_NAME}}.fulfilled, (state, action) => {
        state.isLoading = false;
        state.{{STATE_FIELD}} = action.payload;
      })
      // Async action - rejected
      .addCase({{ASYNC_ACTION_NAME}}.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });
  },
});

// Export actions
export const { {{ACTION_NAME}}, reset{{SLICE_NAME}}, clearError } =
  {{SLICE_NAME_LOWER}}Slice.actions;

// Export reducer
export default {{SLICE_NAME_LOWER}}Slice.reducer;

// Selectors
export const select{{SLICE_NAME}}{{STATE_FIELD}} = (state: { {{SLICE_NAME_LOWER}}: {{SLICE_NAME}}State }) =>
  state.{{SLICE_NAME_LOWER}}.{{STATE_FIELD}};

export const select{{SLICE_NAME}}Loading = (state: { {{SLICE_NAME_LOWER}}: {{SLICE_NAME}}State }) =>
  state.{{SLICE_NAME_LOWER}}.isLoading;

export const select{{SLICE_NAME}}Error = (state: { {{SLICE_NAME_LOWER}}: {{SLICE_NAME}}State }) =>
  state.{{SLICE_NAME_LOWER}}.error;

// Template Placeholders:
// {{SLICE_PURPOSE}} - Slice purpose
// {{SLICE_SCOPE}} - Slice scope
// {{SLICE_NAME}} - PascalCase slice name (e.g., "User", "Products")
// {{SLICE_NAME_LOWER}} - camelCase slice name (e.g., "user", "products")
// {{STATE_FIELD}} - State field name
// {{STATE_TYPE}} - State field type
// {{INITIAL_VALUE}} - Initial value
// {{ASYNC_ACTION_DESCRIPTION}} - Description of async action
// {{ASYNC_ACTION_NAME}} - Async action name (e.g., "fetchUser")
// {{ASYNC_PARAM}} - Async parameter name
// {{ASYNC_PARAM_TYPE}} - Async parameter type
// {{ASYNC_LOGIC}} - Async logic description
// {{API_CALL}} - API call implementation
// {{ACTION_NAME}} - Synchronous action name
// {{ACTION_PAYLOAD_TYPE}} - Action payload type
// {{ACTION_LOGIC}} - Action logic description
