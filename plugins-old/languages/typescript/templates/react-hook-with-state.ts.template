// Purpose: {{HOOK_PURPOSE}} - Stateful custom React hook
// Scope: {{HOOK_SCOPE}}
// Usage: Copy and replace {{PLACEHOLDERS}}

import { useState, useEffect, useCallback, useRef } from 'react';

/**
 * State interface for {{HOOK_NAME}} hook
 */
interface {{HOOK_NAME}}State {
  data: {{DATA_TYPE}} | null;
  isLoading: boolean;
  error: Error | null;
}

/**
 * {{HOOK_NAME}} hook
 *
 * {{HOOK_DESCRIPTION}}
 *
 * @param {{PARAM}} - {{PARAM_DESCRIPTION}}
 * @returns State and control functions
 */
export function use{{HOOK_NAME}}({{PARAM}}: {{PARAM_TYPE}}) {
  const [state, setState] = useState<{{HOOK_NAME}}State>({
    data: null,
    isLoading: false,
    error: null,
  });

  const isMountedRef = useRef(true);

  useEffect(() => {
    return () => {
      isMountedRef.current = false;
    };
  }, []);

  const execute = useCallback(async () => {
    setState({ data: null, isLoading: true, error: null });

    try {
      // {{ASYNC_LOGIC}}
      const result = await {{ASYNC_OPERATION}};

      if (isMountedRef.current) {
        setState({ data: result, isLoading: false, error: null });
      }
    } catch (err) {
      if (isMountedRef.current) {
        setState({
          data: null,
          isLoading: false,
          error: err instanceof Error ? err : new Error('Unknown error'),
        });
      }
    }
  }, [{{PARAM}}]);

  const reset = useCallback(() => {
    setState({ data: null, isLoading: false, error: null });
  }, []);

  useEffect(() => {
    execute();
  }, [execute]);

  return {
    ...state,
    execute,
    reset,
  };
}

// Placeholders:
// {{HOOK_PURPOSE}}, {{HOOK_SCOPE}}, {{HOOK_NAME}}, {{HOOK_DESCRIPTION}}
// {{DATA_TYPE}}, {{PARAM}}, {{PARAM_TYPE}}, {{PARAM_DESCRIPTION}}
// {{ASYNC_LOGIC}}, {{ASYNC_OPERATION}}
