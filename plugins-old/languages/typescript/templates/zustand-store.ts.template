// Purpose: {{STORE_PURPOSE}} - Zustand store
// Scope: {{STORE_SCOPE}}
// Usage: Copy and replace {{PLACEHOLDERS}}

import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

/**
 * {{STORE_NAME}} state interface
 */
interface {{STORE_NAME}}Store {
  // State
  {{STATE_FIELD}}: {{STATE_TYPE}};
  {{STATE_FIELD_2}}: {{STATE_TYPE_2}};
  isLoading: boolean;
  error: Error | null;

  // Actions
  {{ACTION_NAME}}: ({{ACTION_PARAM}}: {{ACTION_PARAM_TYPE}}) => void;
  {{ASYNC_ACTION_NAME}}: ({{ASYNC_PARAM}}: {{ASYNC_PARAM_TYPE}}) => Promise<void>;
  reset: () => void;
}

/**
 * {{STORE_NAME}} Zustand store
 *
 * {{STORE_DESCRIPTION}}
 *
 * @example
 * ```tsx
 * const { {{STATE_FIELD}}, {{ACTION_NAME}} } = use{{STORE_NAME}}Store();
 * ```
 */
export const use{{STORE_NAME}}Store = create<{{STORE_NAME}}Store>()(
  devtools(
    persist(
      (set, get) => ({
        // Initial state
        {{STATE_FIELD}}: {{INITIAL_VALUE}},
        {{STATE_FIELD_2}}: {{INITIAL_VALUE_2}},
        isLoading: false,
        error: null,

        // Synchronous actions
        {{ACTION_NAME}}: ({{ACTION_PARAM}}) => {
          set({ {{STATE_FIELD}}: {{ACTION_LOGIC}} });
        },

        // Async actions
        {{ASYNC_ACTION_NAME}}: async ({{ASYNC_PARAM}}) => {
          set({ isLoading: true, error: null });

          try {
            // {{ASYNC_LOGIC}}
            const result = await {{API_CALL}};
            set({
              {{STATE_FIELD}}: result,
              isLoading: false,
            });
          } catch (error) {
            set({
              isLoading: false,
              error: error instanceof Error ? error : new Error('Unknown error'),
            });
          }
        },

        // Reset action
        reset: () => {
          set({
            {{STATE_FIELD}}: {{INITIAL_VALUE}},
            {{STATE_FIELD_2}}: {{INITIAL_VALUE_2}},
            isLoading: false,
            error: null,
          });
        },
      }),
      {
        name: '{{STORE_NAME_LOWER}}-storage',
        // Optionally persist only certain fields
        partialize: (state) => ({
          {{STATE_FIELD}}: state.{{STATE_FIELD}},
          // Don't persist loading/error states
        }),
      }
    ),
    { name: '{{STORE_NAME}}Store' }
  )
);

// Selectors (optional, for convenience)
export const select{{STATE_FIELD}} = (state: {{STORE_NAME}}Store) => state.{{STATE_FIELD}};
export const selectIsLoading = (state: {{STORE_NAME}}Store) => state.isLoading;
export const selectError = (state: {{STORE_NAME}}Store) => state.error;

// Template Placeholders:
// {{STORE_PURPOSE}} - Store purpose
// {{STORE_SCOPE}} - Store scope
// {{STORE_NAME}} - PascalCase store name (e.g., "Auth", "User")
// {{STORE_NAME_LOWER}} - camelCase store name (e.g., "auth", "user")
// {{STORE_DESCRIPTION}} - Detailed description
// {{STATE_FIELD}} - State field name
// {{STATE_TYPE}} - State field type
// {{STATE_FIELD_2}} - Second state field
// {{STATE_TYPE_2}} - Second field type
// {{INITIAL_VALUE}} - Initial value for first field
// {{INITIAL_VALUE_2}} - Initial value for second field
// {{ACTION_NAME}} - Action function name
// {{ACTION_PARAM}} - Action parameter name
// {{ACTION_PARAM_TYPE}} - Action parameter type
// {{ACTION_LOGIC}} - Action logic implementation
// {{ASYNC_ACTION_NAME}} - Async action name
// {{ASYNC_PARAM}} - Async parameter name
// {{ASYNC_PARAM_TYPE}} - Async parameter type
// {{ASYNC_LOGIC}} - Async logic description
// {{API_CALL}} - API call implementation
