"""{{MODEL_NAME}} Pydantic schemas.

Purpose: Request/response validation for {{MODEL_NAME}} API
Scope: API serialization and validation
"""

from pydantic import BaseModel, ConfigDict, Field
from datetime import datetime
from typing import Optional


class {{MODEL_NAME}}Base(BaseModel):
    """Base {{MODEL_NAME}} schema with common fields."""

    # TODO: Add your base fields here
    # Example:
    # name: str = Field(..., description="{{MODEL_NAME}} name")
    # description: Optional[str] = Field(None, description="{{MODEL_NAME}} description")
    pass


class {{MODEL_NAME}}Create({{MODEL_NAME}}Base):
    """Schema for creating a new {{MODEL_NAME}}.

    All required fields must be provided.
    """

    # Add creation-specific fields if needed
    pass

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                # TODO: Add example data
                # "name": "Example",
                # "description": "An example {{MODEL_NAME}}"
            }
        }
    )


class {{MODEL_NAME}}Update(BaseModel):
    """Schema for updating {{MODEL_NAME}}.

    All fields are optional for partial updates.
    """

    # TODO: Add update fields (all optional)
    # name: Optional[str] = None
    # description: Optional[str] = None
    pass


class {{MODEL_NAME}}Response({{MODEL_NAME}}Base):
    """Schema for {{MODEL_NAME}} responses from API.

    Includes all fields including generated ones.
    """

    id: int
    created_at: datetime
    updated_at: datetime

    model_config = ConfigDict(from_attributes=True)


class {{MODEL_NAME}}List(BaseModel):
    """Paginated list of {{MODEL_NAME}}s."""

    items: list[{{MODEL_NAME}}Response]
    total: int
    page: int
    page_size: int
