"""{{MODEL_NAME}} database model.

Purpose: {{PURPOSE}}
Scope: Database persistence for {{DESCRIPTION}}
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from backend.core.database import Base


class {{MODEL_NAME}}(Base):
    """{{MODEL_NAME}} model for {{DESCRIPTION}}.

    Attributes:
        id: Primary key
        {{FIELD_DESCRIPTIONS}}
        created_at: Timestamp of creation
        updated_at: Timestamp of last update
    """

    __tablename__ = "{{TABLE_NAME}}"

    # Primary key
    id = Column(Integer, primary_key=True, index=True)

    # TODO: Add your fields here
    # Example fields:
    # name = Column(String(255), nullable=False, index=True)
    # description = Column(Text, nullable=True)
    # is_active = Column(Boolean, default=True, nullable=False)

    # Foreign keys (if needed)
    # user_id = Column(Integer, ForeignKey("users.id"), nullable=False)

    # Timestamps (automatic)
    created_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False
    )
    updated_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False
    )

    # Relationships (if needed)
    # user = relationship("User", back_populates="{{TABLE_NAME}}")

    def __repr__(self) -> str:
        """String representation."""
        return f"<{{MODEL_NAME}}(id={self.id})>"


# Indexes and constraints
# Add table arguments for complex constraints:
# __table_args__ = (
#     CheckConstraint('price >= 0', name='check_price_positive'),
#     Index('idx_name_email', 'name', 'email'),
# )
