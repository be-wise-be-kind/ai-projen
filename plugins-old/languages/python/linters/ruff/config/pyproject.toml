# Purpose: Ruff configuration for Python linting and formatting
# Scope: Code quality, style checking, and automatic formatting
# Overview: Ruff is a fast Python linter and formatter that replaces multiple tools
#     (Black, isort, flake8, pylint subset). Configured to enforce PEP 8, complexity limits,
#     security best practices, and modern Python idioms.
# Dependencies: ruff (install via pip/poetry)
# Exports: Linting and formatting configuration
# Related: Python development tooling, code quality standards
# Implementation: pyproject.toml configuration for Ruff

[tool.ruff]
target-version = "py311"
line-length = 120
cache-dir = "/tmp/.ruff_cache"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "S",   # flake8-bandit (security)
    "C90", # mccabe complexity
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults (common in FastAPI)
    "C901",  # Function is too complex (use mccabe instead)
    "S101",  # Use of assert (common in tests)
]

[tool.ruff.lint.mccabe]
max-complexity = 10  # Enforces reasonable complexity limit

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__ are often intentional
"tests/*" = ["S101", "S105", "S106"]  # Allow asserts and hardcoded passwords in tests
"test_*.py" = ["S101", "S105", "S106"]
"**/test_*.py" = ["S101", "S105", "S106"]
