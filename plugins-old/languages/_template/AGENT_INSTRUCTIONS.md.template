# <LANGUAGE> Plugin - Agent Instructions

**Purpose**: Instructions for AI agents to install the <LANGUAGE> language plugin

**Scope**: <LANGUAGE> development environment with linting, formatting, and testing

**Overview**: Step-by-step instructions for AI agents to install and configure <LANGUAGE> tooling
    including linters, formatters, test frameworks, and integration with Makefile and CI/CD.

**Dependencies**: foundation/ai-folder plugin

**Exports**: <LANGUAGE> development environment with quality tooling

**Related**: Language plugin for <LANGUAGE> projects

**Implementation**: Option-based installation with user preferences

---

## Prerequisites

Before installing this plugin, ensure:
- ✅ Git repository is initialized
- ✅ foundation/ai-folder plugin is installed (agents.md and .ai/ exist)
- ✅ <LANGUAGE> runtime is installed (or will be installed)
- ✅ Package manager (<PACKAGE_MANAGER>) is available

## Installation Steps

### Step 1: Gather User Preferences

Ask the user (or use recommended defaults):

1. **Linter**: Which linter should we use?
   - <LINTER_OPTION_1> (recommended - <reason>)
   - <LINTER_OPTION_2> (<reason>)
   - <LINTER_OPTION_3> (<reason>)
   - Default: <LINTER_OPTION_1>

2. **Formatter**: Which formatter should we use?
   - <FORMATTER_OPTION_1> (recommended - <reason>)
   - <FORMATTER_OPTION_2> (<reason>)
   - Default: <FORMATTER_OPTION_1>

3. **Testing**: Which test framework?
   - <TEST_OPTION_1> (recommended - <reason>)
   - <TEST_OPTION_2> (<reason>)
   - Default: <TEST_OPTION_1>

4. **Type Checking**: Enable type checking? (if applicable)
   - Yes (recommended)
   - No
   - Default: Yes

### Step 2: Install Linter

Based on user's choice, follow the appropriate sub-instructions:

- For <LINTER_OPTION_1>: See `linters/<linter1>/AGENT_INSTRUCTIONS.md`
- For <LINTER_OPTION_2>: See `linters/<linter2>/AGENT_INSTRUCTIONS.md`
- For <LINTER_OPTION_3>: See `linters/<linter3>/AGENT_INSTRUCTIONS.md`

**Common steps**:
1. Copy linter config to repository root
2. Install linter package via <PACKAGE_MANAGER>
3. Add linter scripts to package.json (or equivalent)

### Step 3: Install Formatter

Based on user's choice:

- For <FORMATTER_OPTION_1>: See `formatters/<formatter1>/AGENT_INSTRUCTIONS.md`
- For <FORMATTER_OPTION_2>: See `formatters/<formatter2>/AGENT_INSTRUCTIONS.md`

**Common steps**:
1. Copy formatter config to repository root
2. Install formatter package via <PACKAGE_MANAGER>
3. Add format scripts

### Step 4: Install Test Framework

Based on user's choice:

- For <TEST_OPTION_1>: See `testing/<test1>/AGENT_INSTRUCTIONS.md`
- For <TEST_OPTION_2>: See `testing/<test2>/AGENT_INSTRUCTIONS.md`

**Common steps**:
1. Copy test config to repository root
2. Install test framework via <PACKAGE_MANAGER>
3. Create tests/ directory if it doesn't exist
4. Add test scripts

### Step 5: Create Makefile Targets

Add <LANGUAGE>-specific targets to Makefile (create if doesn't exist):

```makefile
# Copy from templates/makefile-<language>.mk

.PHONY: lint-<lang> format-<lang> test-<lang> <lang>-check

lint-<lang>:
	<linter-command>

format-<lang>:
	<formatter-command>

test-<lang>:
	<test-command>

<lang>-check: lint-<lang> test-<lang>
	@echo "✓ <Language> checks passed"
```

If Makefile already exists, append these targets.

### Step 6: Extend agents.md

Add <LANGUAGE>-specific guidelines to agents.md:

1. Read agents.md
2. Find the `### LANGUAGE_SPECIFIC_GUIDELINES` section
3. Insert between markers:

```markdown
#### <Language> (<Style Guide Name>)
- <Key convention 1>
- <Key convention 2>
- <Key convention 3>
- <Naming patterns>
- <Import/module organization>

**Linting**: `make lint-<lang>` (runs <LINTER>)
**Formatting**: `make format-<lang>` (runs <FORMATTER>)
**Testing**: `make test-<lang>` (runs <TEST_FRAMEWORK>)
```

### Step 7: Add .ai Documentation

Create `.ai/docs/<LANGUAGE>_STANDARDS.md`:

```markdown
# <Language> Standards

**Purpose**: <Language> coding standards and best practices

## Linting Rules

- <Rule category 1>
- <Rule category 2>

## Formatting Style

- Indentation: <X spaces/tabs>
- Line length: <X characters>
- <Other formatting rules>

## Naming Conventions

- Functions: <convention>
- Classes: <convention>
- Constants: <convention>
- Files: <convention>

## Import Organization

- <How to organize imports>

## Testing Conventions

- Test file naming: <pattern>
- Test function naming: <pattern>
- Assertion style: <style>

## Type Annotations (if applicable)

- <Type annotation rules>
```

Update `.ai/index.yaml` to reference this documentation.

### Step 8: Add GitHub Actions Workflow (if CI/CD plugin present)

If `.github/workflows/` exists:

1. Copy `templates/github-workflow-<language>-lint.yml` to `.github/workflows/<language>-lint.yml`
2. Customize for repository structure
3. Test workflow syntax

### Step 9: Create Package Configuration

Create or update package configuration file:
- Python: `requirements.txt` or `pyproject.toml`
- TypeScript: `package.json`
- Go: `go.mod`
- Rust: `Cargo.toml`
- Java: `pom.xml` or `build.gradle`

Include:
- Linter dependencies
- Formatter dependencies
- Test framework dependencies
- Type checker dependencies (if applicable)

### Step 10: Create Example/Starter Files (Optional)

If repository is empty or user requests it:

1. Create `src/` directory
2. Add example <LANGUAGE> file from `templates/example.<ext>`
3. Add corresponding test file from `templates/example.test.<ext>`
4. Demonstrate linting/formatting/testing works

### Step 11: Validate Installation

Run the following commands to verify:

```bash
# Verify config files exist
ls -la .<linter>rc  # or equivalent
ls -la .<formatter>rc

# Verify package dependencies installed
<package-manager> list | grep <linter>
<package-manager> list | grep <formatter>
<package-manager> list | grep <test-framework>

# Run linting (should pass or show expected warnings)
make lint-<lang>

# Run formatting (should work without errors)
make format-<lang>

# Run tests (should pass if example tests created)
make test-<lang>
```

## Post-Installation

After successful installation:

1. **Inform the user**:
   - Linter: <LINTER> installed
   - Formatter: <FORMATTER> installed
   - Test framework: <TEST_FRAMEWORK> installed
   - Make targets: `lint-<lang>`, `format-<lang>`, `test-<lang>`

2. **Suggest next steps**:
   - Run `make lint-<lang>` to check code
   - Run `make format-<lang>` to format code
   - Run `make test-<lang>` to run tests
   - Consider adding infrastructure plugins (Docker, CI/CD)

## Integration with Other Plugins

### With Pre-commit Hooks Plugin
If pre-commit plugin is installed, add hooks:
```yaml
- id: <linter>
  name: Run <Language> linter
  entry: make lint-<lang>
  language: system
  pass_filenames: false
```

### With CI/CD Plugin
Workflow already created in Step 8 if GitHub Actions present.

### With Docker Plugin
Consider adding <LANGUAGE> runtime to Dockerfile if containerization is used.

## Troubleshooting

### Issue: Linter not found
**Solution**: Install <LINTER> via `<package-manager> install <linter>`

### Issue: Config file conflicts
**Solution**: Merge configurations or rename conflicting files

### Issue: Make targets don't work
**Solution**: Ensure <LANGUAGE> runtime and tools are in PATH

## Standalone Usage

This plugin works standalone without the orchestrator:

```bash
# Manual installation
1. Copy this plugin to your project
2. Follow steps 1-11 above
3. Validate with step 11
```

## Success Criteria

Installation is successful when:
- ✅ Linter config exists and linting works
- ✅ Formatter config exists and formatting works
- ✅ Test framework installed and tests run
- ✅ Makefile targets work (`make lint-<lang>`, `make format-<lang>`, `make test-<lang>`)
- ✅ agents.md updated with <LANGUAGE> guidelines
- ✅ `.ai/docs/<LANGUAGE>_STANDARDS.md` exists
- ✅ User can start developing with quality tooling

---

**Note**: Replace all `<PLACEHOLDER>` markers with actual values for your language plugin.
