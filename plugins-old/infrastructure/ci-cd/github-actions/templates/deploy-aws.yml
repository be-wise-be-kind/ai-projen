# Purpose: Deploy containerized applications to AWS ECS with zero-downtime
# Scope: Production deployment for frontend and backend services
# Overview: Orchestrates deployment of Docker containers to ECS with environment configuration,
#     task definition management, health monitoring, and rollback capabilities.
# Dependencies: AWS ECS, ECR images, task definitions, AWS OIDC authentication
# Exports: Deployed services to ECS cluster with updated task definitions
# Environment: AWS ECS with dev/staging/prod environments
# Related: build-ecr.yml, AWS infrastructure
# Implementation: Uses AWS ECS deployment actions with service stability verification

name: Deploy to AWS ECS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/deploy-aws.yml'

env:
  AWS_REGION: us-west-2  # Customize
  ECR_REPOSITORY_FRONTEND: {{PROJECT_NAME}}-frontend  # Customize
  ECR_REPOSITORY_BACKEND: {{PROJECT_NAME}}-backend  # Customize
  ECS_CLUSTER: {{PROJECT_NAME}}-cluster  # Customize
  ECS_SERVICE_FRONTEND: {{PROJECT_NAME}}-frontend  # Customize
  ECS_SERVICE_BACKEND: {{PROJECT_NAME}}-backend  # Customize
  TASK_DEFINITION_FRONTEND: {{PROJECT_NAME}}-frontend  # Customize
  TASK_DEFINITION_BACKEND: {{PROJECT_NAME}}-backend  # Customize

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub-Actions-Deploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download task definitions
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_BACKEND }} \
            --query taskDefinition > backend-task-definition.json
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FRONTEND }} \
            --query taskDefinition > frontend-task-definition.json

      - name: Update backend task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: backend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.sha.outputs.sha_short }}
          environment-variables: |
            LOG_LEVEL=INFO
            ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}

      - name: Update frontend task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: frontend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.sha.outputs.sha_short }}

      - name: Deploy backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Deploy frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 10

      - name: Verify deployment
        run: |
          echo "## ☁️ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ steps.sha.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
