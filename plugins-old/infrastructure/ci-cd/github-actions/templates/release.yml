# Purpose: Automated release workflow with semantic versioning and changelog generation
# Scope: Release management with version bumping and GitHub releases
# Overview: Automates the release process with semantic versioning, changelog generation,
#     GitHub release creation, and asset management.
# Dependencies: GitHub repository, semantic versioning, changelog tools
# Exports: Git tags, GitHub releases, and versioned artifacts
# Environment: GitHub with release permissions
# Related: CI workflows, deployment workflows
# Implementation: Manual or automated release creation with comprehensive metadata

name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      pre_release:
        description: 'Pre-release'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: new_version
        if: github.event_name == 'workflow_dispatch'
        run: |
          LATEST="${{ steps.get_tag.outputs.latest_tag }}"
          LATEST=${LATEST#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$LATEST"

          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          case "${{ github.event.inputs.version_bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            NEW_TAG="${{ steps.new_version.outputs.new_version }}"
          else
            NEW_TAG="${{ github.ref_name }}"
          fi

          echo "## Changes in $NEW_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md

          cat CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && steps.new_version.outputs.new_version || github.ref_name }}
          name: Release ${{ github.event_name == 'workflow_dispatch' && steps.new_version.outputs.new_version || github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.pre_release || false }}
          generate_release_notes: true

      - name: Summary
        run: |
          echo "## ðŸŽ‰ Release Created" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Version: ${{ steps.new_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Pre-release: ${{ github.event.inputs.pre_release || false }}" >> $GITHUB_STEP_SUMMARY
